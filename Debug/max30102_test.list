
max30102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004764  08004764  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004764  08004764  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004764  08004764  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800476c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  080047d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080047d4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afd6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd2  00000000  00000000  0002b0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081f  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001824f  00000000  00000000  0002df17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea6  00000000  00000000  00046166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c56  00000000  00000000  0005300c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f8  00000000  00000000  000d9c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dd05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080046e0 	.word	0x080046e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080046e0 	.word	0x080046e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__io_putchar>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
//printf() function
int __io_putchar(int ch)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	uint8_t temp = ch;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 800093a:	f107 010f 	add.w	r1, r7, #15
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2201      	movs	r2, #1
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <__io_putchar+0x28>)
 8000946:	f002 fabd 	bl	8002ec4 <HAL_UART_Transmit>
	return ch;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000d8 	.word	0x200000d8

08000958 <max30102_plot>:

//Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	printf("%lu,%lu\n", ir_sample, red_sample);
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <max30102_plot+0x1c>)
 8000968:	f003 f8da 	bl	8003b20 <iprintf>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	080046f8 	.word	0x080046f8

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 faf7 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f853 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 f8eb 	bl	8000b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 800098a:	f000 f891 	bl	8000ab0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800098e:	f000 f8bd 	bl	8000b0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialization
  max30102_init(&max30102_obj, &hi2c1);
 8000992:	4923      	ldr	r1, [pc, #140]	; (8000a20 <main+0xa8>)
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <main+0xac>)
 8000996:	f002 fc69 	bl	800326c <max30102_init>
  max30102_reset(&max30102_obj);
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0xac>)
 800099c:	f002 fcdd 	bl	800335a <max30102_reset>
  max30102_clear_fifo(&max30102_obj);
 80009a0:	4820      	ldr	r0, [pc, #128]	; (8000a24 <main+0xac>)
 80009a2:	f002 fea3 	bl	80036ec <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102_obj, max30102_smp_ave_4, 1, 7);
 80009a6:	2307      	movs	r3, #7
 80009a8:	2201      	movs	r2, #1
 80009aa:	2102      	movs	r1, #2
 80009ac:	481d      	ldr	r0, [pc, #116]	; (8000a24 <main+0xac>)
 80009ae:	f002 fe63 	bl	8003678 <max30102_set_fifo_config>

  //Sensor settings
  max30102_set_led_pulse_width(&max30102_obj, max30102_pw_18_bit);
 80009b2:	2103      	movs	r1, #3
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0xac>)
 80009b6:	f002 fdc5 	bl	8003544 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102_obj, max30102_adc_16384);
 80009ba:	2103      	movs	r1, #3
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <main+0xac>)
 80009be:	f002 fde4 	bl	800358a <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102_obj, max30102_sr_800);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0xac>)
 80009c6:	f002 fd9e 	bl	8003506 <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102_obj, 6.2);
 80009ca:	4917      	ldr	r1, [pc, #92]	; (8000a28 <main+0xb0>)
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <main+0xac>)
 80009ce:	f002 fe03 	bl	80035d8 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102_obj, 6.2);
 80009d2:	4915      	ldr	r1, [pc, #84]	; (8000a28 <main+0xb0>)
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <main+0xac>)
 80009d6:	f002 fe27 	bl	8003628 <max30102_set_led_current_2>

  //Enter SpO2 mode
  max30102_set_mode(&max30102_obj, max30102_spo2);
 80009da:	2103      	movs	r1, #3
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <main+0xac>)
 80009de:	f002 fd6c 	bl	80034ba <max30102_set_mode>
  max30102_set_a_full(&max30102_obj, 1);
 80009e2:	2101      	movs	r1, #1
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <main+0xac>)
 80009e6:	f002 fcc9 	bl	800337c <max30102_set_a_full>

  //Initialize 1 temperature measurement
  max30102_set_die_temp_en(&max30102_obj, 1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0xac>)
 80009ee:	f002 fd05 	bl	80033fc <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102_obj, 1);
 80009f2:	2101      	movs	r1, #1
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <main+0xac>)
 80009f6:	f002 fce9 	bl	80033cc <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 80009fa:	2300      	movs	r3, #0
 80009fc:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102_obj, 0x00, en_reg, 1);
 80009fe:	1d3a      	adds	r2, r7, #4
 8000a00:	2301      	movs	r3, #1
 8000a02:	2100      	movs	r1, #0
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <main+0xac>)
 8000a06:	f002 fc83 	bl	8003310 <max30102_read>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //If interrupt flag is active
	  if(max30102_has_interrupt(&max30102_obj))
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <main+0xac>)
 8000a0c:	f002 fd1b 	bl	8003446 <max30102_has_interrupt>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f9      	beq.n	8000a0a <main+0x92>
	  {
		  //Run interrupt handler to read FIFO
		  max30102_interrupt_handler(&max30102_obj);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <main+0xac>)
 8000a18:	f002 fd21 	bl	800345e <max30102_interrupt_handler>
	  if(max30102_has_interrupt(&max30102_obj))
 8000a1c:	e7f5      	b.n	8000a0a <main+0x92>
 8000a1e:	bf00      	nop
 8000a20:	20000084 	.word	0x20000084
 8000a24:	20000120 	.word	0x20000120
 8000a28:	40c66666 	.word	0x40c66666

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	; 0x40
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f8c5 	bl	8003bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a56:	2310      	movs	r3, #16
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a62:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fdc9 	bl	8002604 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a78:	f000 f8b4 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2102      	movs	r1, #2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f836 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000aa2:	f000 f89f 	bl	8000be4 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3740      	adds	r7, #64	; 0x40
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f000 fd55 	bl	800159c <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f874 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000084 	.word	0x20000084
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART1_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f002 f96e 	bl	8002e24 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f849 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000d8 	.word	0x200000d8
 8000b5c:	40013800 	.word	0x40013800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_GPIO_Init+0x7c>)
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <MX_GPIO_Init+0x80>)
 8000bba:	f000 fb49 	bl	8001250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2017      	movs	r0, #23
 8000bc4:	f000 fb0d 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc8:	2017      	movs	r0, #23
 8000bca:	f000 fb26 	bl	800121a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	10210000 	.word	0x10210000
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x60>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_MspInit+0x60>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_I2C_MspInit+0x70>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d123      	bne.n	8000cbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_I2C_MspInit+0x78>)
 8000ca0:	f000 fad6 	bl	8001250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cae:	61d3      	str	r3, [r2, #28]
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x8c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d131      	bne.n	8000d54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <HAL_UART_MspInit+0x94>)
 8000d36:	f000 fa8b 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_UART_MspInit+0x94>)
 8000d50:	f000 fa7e 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <BusFault_Handler+0x4>

08000d86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f922 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
    max30102_on_interrupt(&max30102_obj);
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <EXTI9_5_IRQHandler+0x18>)
 8000dc2:	f002 fb33 	bl	800342c <max30102_on_interrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8000dc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dca:	f000 fbc5 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000120 	.word	0x20000120

08000dd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
  }

  return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e009      	b.n	8000e38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fd7d 	bl	800092c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf1      	blt.n	8000e24 <_write+0x12>
  }
  return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e70:	605a      	str	r2, [r3, #4]
  return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 fed4 	bl	8003c88 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20005000 	.word	0x20005000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	20000228 	.word	0x20000228
 8000f14:	20000380 	.word	0x20000380

08000f18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff fff8 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2a:	490c      	ldr	r1, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f40:	4c09      	ldr	r4, [pc, #36]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 fea1 	bl	8003c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f52:	f7ff fd11 	bl	8000978 <main>
  bx lr
 8000f56:	4770      	bx	lr
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f60:	0800476c 	.word	0x0800476c
  ldr r2, =_sbss
 8000f64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f68:	2000037c 	.word	0x2000037c

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f923 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fe30 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f93b 	bl	8001236 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f903 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000008 	.word	0x20000008
 800101c:	2000022c 	.word	0x2000022c

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	2000022c 	.word	0x2000022c

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4906      	ldr	r1, [pc, #24]	; (80010cc <__NVIC_EnableIRQ+0x34>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff90 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff2d 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff42 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff35 	bl	8001098 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e169      	b.n	8001538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8158 	bne.w	8001532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a9a      	ldr	r2, [pc, #616]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d05e      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 800128c:	4a98      	ldr	r2, [pc, #608]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d875      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 8001292:	4a98      	ldr	r2, [pc, #608]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d058      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 8001298:	4a96      	ldr	r2, [pc, #600]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d86f      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 800129e:	4a96      	ldr	r2, [pc, #600]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d052      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012a4:	4a94      	ldr	r2, [pc, #592]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d869      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012aa:	4a94      	ldr	r2, [pc, #592]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d04c      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012b0:	4a92      	ldr	r2, [pc, #584]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d863      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012b6:	4a92      	ldr	r2, [pc, #584]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d046      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012bc:	4a90      	ldr	r2, [pc, #576]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d85d      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d82a      	bhi.n	800131c <HAL_GPIO_Init+0xcc>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d859      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_Init+0x80>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001337 	.word	0x08001337
 80012dc:	08001379 	.word	0x08001379
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	0800137f 	.word	0x0800137f
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	0800137f 	.word	0x0800137f
 8001300:	0800137f 	.word	0x0800137f
 8001304:	0800137f 	.word	0x0800137f
 8001308:	0800137f 	.word	0x0800137f
 800130c:	0800137f 	.word	0x0800137f
 8001310:	0800137f 	.word	0x0800137f
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_GPIO_Init+0x2b4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e029      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e024      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01f      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e01a      	b.n	8001380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e013      	b.n	8001380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e009      	b.n	8001380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e003      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x130>
          break;
 800137e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d801      	bhi.n	800138a <HAL_GPIO_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <HAL_GPIO_Init+0x13e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d802      	bhi.n	800139c <HAL_GPIO_Init+0x14c>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x152>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3b08      	subs	r3, #8
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	210f      	movs	r1, #15
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	6a39      	ldr	r1, [r7, #32]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80b1 	beq.w	8001532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d0:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_GPIO_Init+0x2bc>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a40      	ldr	r2, [pc, #256]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d013      	beq.n	800143c <HAL_GPIO_Init+0x1ec>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00d      	beq.n	8001438 <HAL_GPIO_Init+0x1e8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x1e4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_GPIO_Init+0x2cc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_GPIO_Init+0x1e0>
 800142c:	2303      	movs	r3, #3
 800142e:	e006      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001430:	2304      	movs	r3, #4
 8001432:	e004      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001434:	2302      	movs	r3, #2
 8001436:	e002      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 800143c:	2300      	movs	r3, #0
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	f002 0203 	and.w	r2, r2, #3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4093      	lsls	r3, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144e:	492f      	ldr	r1, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2bc>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	492c      	ldr	r1, [pc, #176]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4928      	ldr	r1, [pc, #160]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4922      	ldr	r1, [pc, #136]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	491e      	ldr	r1, [pc, #120]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4918      	ldr	r1, [pc, #96]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4914      	ldr	r1, [pc, #80]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d021      	beq.n	8001524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e021      	b.n	8001532 <HAL_GPIO_Init+0x2e2>
 80014ee:	bf00      	nop
 80014f0:	10320000 	.word	0x10320000
 80014f4:	10310000 	.word	0x10310000
 80014f8:	10220000 	.word	0x10220000
 80014fc:	10210000 	.word	0x10210000
 8001500:	10120000 	.word	0x10120000
 8001504:	10110000 	.word	0x10110000
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	40010800 	.word	0x40010800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40011000 	.word	0x40011000
 800151c:	40011400 	.word	0x40011400
 8001520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_GPIO_Init+0x304>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	43db      	mvns	r3, r3
 800152c:	4909      	ldr	r1, [pc, #36]	; (8001554 <HAL_GPIO_Init+0x304>)
 800152e:	4013      	ands	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f ae8e 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	372c      	adds	r7, #44	; 0x2c
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f806 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e12b      	b.n	8001806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fb46 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	; 0x24
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001600:	f001 fbca 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8001604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a81      	ldr	r2, [pc, #516]	; (8001810 <HAL_I2C_Init+0x274>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d807      	bhi.n	8001620 <HAL_I2C_Init+0x84>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4a80      	ldr	r2, [pc, #512]	; (8001814 <HAL_I2C_Init+0x278>)
 8001614:	4293      	cmp	r3, r2
 8001616:	bf94      	ite	ls
 8001618:	2301      	movls	r3, #1
 800161a:	2300      	movhi	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	e006      	b.n	800162e <HAL_I2C_Init+0x92>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4a7d      	ldr	r2, [pc, #500]	; (8001818 <HAL_I2C_Init+0x27c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	bf94      	ite	ls
 8001628:	2301      	movls	r3, #1
 800162a:	2300      	movhi	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e7      	b.n	8001806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4a78      	ldr	r2, [pc, #480]	; (800181c <HAL_I2C_Init+0x280>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <HAL_I2C_Init+0x274>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d802      	bhi.n	8001670 <HAL_I2C_Init+0xd4>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	e009      	b.n	8001684 <HAL_I2C_Init+0xe8>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	4a69      	ldr	r2, [pc, #420]	; (8001820 <HAL_I2C_Init+0x284>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	3301      	adds	r3, #1
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	430b      	orrs	r3, r1
 800168a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001696:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	495c      	ldr	r1, [pc, #368]	; (8001810 <HAL_I2C_Init+0x274>)
 80016a0:	428b      	cmp	r3, r1
 80016a2:	d819      	bhi.n	80016d8 <HAL_I2C_Init+0x13c>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e59      	subs	r1, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b2:	1c59      	adds	r1, r3, #1
 80016b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016b8:	400b      	ands	r3, r1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HAL_I2C_Init+0x138>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e59      	subs	r1, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d2:	e051      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e04f      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_I2C_Init+0x168>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e012      	b.n	800172a <HAL_I2C_Init+0x18e>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e58      	subs	r0, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	0099      	lsls	r1, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	fbb0 f3f3 	udiv	r3, r0, r3
 800171a:	3301      	adds	r3, #1
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Init+0x196>
 800172e:	2301      	movs	r3, #1
 8001730:	e022      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <HAL_I2C_Init+0x1bc>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e58      	subs	r0, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	fbb0 f3f3 	udiv	r3, r0, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001756:	e00f      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6911      	ldr	r1, [r2, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	000186a0 	.word	0x000186a0
 8001814:	001e847f 	.word	0x001e847f
 8001818:	003d08ff 	.word	0x003d08ff
 800181c:	431bde83 	.word	0x431bde83
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	460b      	mov	r3, r1
 8001832:	817b      	strh	r3, [r7, #10]
 8001834:	4613      	mov	r3, r2
 8001836:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fbf2 	bl	8001020 <HAL_GetTick>
 800183c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b20      	cmp	r3, #32
 8001848:	f040 80e0 	bne.w	8001a0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2319      	movs	r3, #25
 8001852:	2201      	movs	r2, #1
 8001854:	4970      	ldr	r1, [pc, #448]	; (8001a18 <HAL_I2C_Master_Transmit+0x1f4>)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fc9e 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001862:	2302      	movs	r3, #2
 8001864:	e0d3      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x50>
 8001870:	2302      	movs	r3, #2
 8001872:	e0cc      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d007      	beq.n	800189a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2221      	movs	r2, #33	; 0x21
 80018ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2210      	movs	r2, #16
 80018b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	893a      	ldrh	r2, [r7, #8]
 80018ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_I2C_Master_Transmit+0x1f8>)
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6a3a      	ldr	r2, [r7, #32]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fb08 	bl	8001ef8 <I2C_MasterRequestWrite>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e08d      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001908:	e066      	b.n	80019d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fd5c 	bl	80023cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b04      	cmp	r3, #4
 8001920:	d107      	bne.n	8001932 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06b      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d11b      	bne.n	80019ac <HAL_I2C_Master_Transmit+0x188>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d017      	beq.n	80019ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	6a39      	ldr	r1, [r7, #32]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 fd53 	bl	800245c <I2C_WaitOnBTFFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00d      	beq.n	80019d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d107      	bne.n	80019d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e01a      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d194      	bne.n	800190a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e000      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
  }
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	00100002 	.word	0x00100002
 8001a1c:	ffff0000 	.word	0xffff0000

08001a20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	817b      	strh	r3, [r7, #10]
 8001a30:	4613      	mov	r3, r2
 8001a32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff faf2 	bl	8001020 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	f040 824b 	bne.w	8001ee2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2319      	movs	r3, #25
 8001a52:	2201      	movs	r2, #1
 8001a54:	497f      	ldr	r1, [pc, #508]	; (8001c54 <HAL_I2C_Master_Receive+0x234>)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fb9e 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
 8001a64:	e23e      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_Master_Receive+0x54>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e237      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d007      	beq.n	8001a9a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2222      	movs	r2, #34	; 0x22
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a5f      	ldr	r2, [pc, #380]	; (8001c58 <HAL_I2C_Master_Receive+0x238>)
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001adc:	8979      	ldrh	r1, [r7, #10]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fa8a 	bl	8001ffc <I2C_MasterRequestRead>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1f8      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d113      	bne.n	8001b22 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e1cc      	b.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d11e      	bne.n	8001b68 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3a:	b672      	cpsid	i
}
 8001b3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b64:	b662      	cpsie	i
}
 8001b66:	e035      	b.n	8001bd4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d11e      	bne.n	8001bae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001baa:	b662      	cpsie	i
}
 8001bac:	e012      	b.n	8001bd4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001bd4:	e172      	b.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	f200 811f 	bhi.w	8001e1e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d123      	bne.n	8001c30 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fc7d 	bl	80024ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e173      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c2e:	e145      	b.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d152      	bne.n	8001cde <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <HAL_I2C_Master_Receive+0x23c>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 faa8 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e148      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000
 8001c5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca6:	b662      	cpsie	i
}
 8001ca8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cdc:	e0ee      	b.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4981      	ldr	r1, [pc, #516]	; (8001eec <HAL_I2C_Master_Receive+0x4cc>)
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fa55 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0f5      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <HAL_I2C_Master_Receive+0x4d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	4a6b      	ldr	r2, [pc, #428]	; (8001ef4 <HAL_I2C_Master_Receive+0x4d4>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a1a      	lsrs	r2, r3, #8
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00da      	lsls	r2, r3, #3
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d118      	bne.n	8001d96 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d86:	b662      	cpsie	i
}
 8001d88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0a6      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d1d9      	bne.n	8001d58 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001de6:	b662      	cpsie	i
}
 8001de8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e1c:	e04e      	b.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fb62 	bl	80024ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e058      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d124      	bne.n	8001ebc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d107      	bne.n	8001e8a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e88:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f ae88 	bne.w	8001bd6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00010004 	.word	0x00010004
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	14f8b589 	.word	0x14f8b589

08001ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	460b      	mov	r3, r1
 8001f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d006      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e00b      	b.n	8001f4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d107      	bne.n	8001f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f91d 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d103      	bne.n	8001f7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e035      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f88:	d108      	bne.n	8001f9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	e01b      	b.n	8001fd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f9c:	897b      	ldrh	r3, [r7, #10]
 8001f9e:	11db      	asrs	r3, r3, #7
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0306 	and.w	r3, r3, #6
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f063 030f 	orn	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <I2C_MasterRequestWrite+0xfc>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f966 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e010      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <I2C_MasterRequestWrite+0x100>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f956 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	00010008 	.word	0x00010008
 8001ff8:	00010002 	.word	0x00010002

08001ffc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002020:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d006      	beq.n	8002036 <I2C_MasterRequestRead+0x3a>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d003      	beq.n	8002036 <I2C_MasterRequestRead+0x3a>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	2b11      	cmp	r3, #17
 800204e:	d107      	bne.n	8002060 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f893 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002086:	d103      	bne.n	8002090 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e079      	b.n	8002188 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209c:	d108      	bne.n	80020b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	e05f      	b.n	8002170 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	11db      	asrs	r3, r3, #7
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 0306 	and.w	r3, r3, #6
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f063 030f 	orn	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4930      	ldr	r1, [pc, #192]	; (8002190 <I2C_MasterRequestRead+0x194>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f8dc 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e054      	b.n	8002188 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4929      	ldr	r1, [pc, #164]	; (8002194 <I2C_MasterRequestRead+0x198>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f8cc 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e044      	b.n	8002188 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002122:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f831 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00d      	beq.n	8002158 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214a:	d103      	bne.n	8002154 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e017      	b.n	8002188 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002158:	897b      	ldrh	r3, [r7, #10]
 800215a:	11db      	asrs	r3, r3, #7
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 0306 	and.w	r3, r3, #6
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f063 030e 	orn	r3, r3, #14
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <I2C_MasterRequestRead+0x198>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f888 	bl	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00010008 	.word	0x00010008
 8002194:	00010002 	.word	0x00010002

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e048      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d044      	beq.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7fe ff35 	bl	8001020 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d139      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10d      	bne.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e00c      	b.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d116      	bne.n	800223c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e023      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10d      	bne.n	8002262 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	e00c      	b.n	800227c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	43da      	mvns	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d093      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229a:	e071      	b.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d123      	bne.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e067      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d041      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7fe fe90 	bl	8001020 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d136      	bne.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10c      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e00b      	b.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e00b      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af6d 	bne.w	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d8:	e034      	b.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f8e3 	bl	80025a6 <I2C_IsAcknowledgeFailed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e034      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d028      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe fe15 	bl	8001020 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11d      	bne.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d1c3      	bne.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002468:	e034      	b.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f89b 	bl	80025a6 <I2C_IsAcknowledgeFailed>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e034      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d028      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7fe fdcd 	bl	8001020 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11d      	bne.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d016      	beq.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d1c3      	bne.n	800246a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024f8:	e049      	b.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	d119      	bne.n	800253c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0210 	mvn.w	r2, #16
 8002510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e030      	b.n	800259e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7fe fd70 	bl	8001020 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11d      	bne.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d016      	beq.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d1ae      	bne.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d11b      	bne.n	80025f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
	...

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e272      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <HAL_RCC_OscConfig+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d168      	bne.n	8002730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e24c      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x76>
 800266c:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbc>
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fc9e 	bl	8001020 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fc9a 	bl	8001020 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e200      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fc8a 	bl	8001020 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fc86 	bl	8001020 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1ec      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x10c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c0      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fc3f 	bl	8001020 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fc3b 	bl	8001020 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4927      	ldr	r1, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc1e 	bl	8001020 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fc1a 	bl	8001020 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e180      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d019      	beq.n	800284e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe fbfe 	bl	8001020 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe fbfa 	bl	8001020 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e160      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f000 face 	bl	8002de8 <RCC_Delay>
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fbe4 	bl	8001020 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e00f      	b.n	800287c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fbe0 	bl	8001020 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d908      	bls.n	800287c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e146      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	42420000 	.word	0x42420000
 8002878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e9      	bne.n	800285c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a6 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe fba1 	bl	8001020 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe fb9d 	bl	8001020 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e103      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x312>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x334>
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x356>
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a5d      	ldr	r2, [pc, #372]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe fb51 	bl	8001020 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fb4d 	bl	8001020 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0b1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x37e>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fb3b 	bl	8001020 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fb37 	bl	8001020 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d061      	beq.n	8002abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d146      	bne.n	8002a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fb0b 	bl	8001020 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fb07 	bl	8001020 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e06d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4921      	ldr	r1, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a19      	ldr	r1, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fadb 	bl	8001020 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fad7 	bl	8001020 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46a>
 8002a8c:	e035      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fac4 	bl	8001020 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fac0 	bl	8001020 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e026      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x498>
 8002aba:	e01e      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e019      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x500>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d0      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4965      	ldr	r1, [pc, #404]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d040      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e073      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4936      	ldr	r1, [pc, #216]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fa12 	bl	8001020 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fa0e 	bl	8001020 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e053      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d210      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4922      	ldr	r1, [pc, #136]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe f970 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08004704 	.word	0x08004704
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x30>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0a:	e027      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e027      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e004      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	613b      	str	r3, [r7, #16]
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	693b      	ldr	r3, [r7, #16]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	0800471c 	.word	0x0800471c
 8002d7c:	0800472c 	.word	0x0800472c
 8002d80:	003d0900 	.word	0x003d0900

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000000 	.word	0x20000000

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d9c:	f7ff fff2 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08004714 	.word	0x08004714

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0adb      	lsrs	r3, r3, #11
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004714 	.word	0x08004714

08002de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCC_Delay+0x34>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <RCC_Delay+0x38>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e04:	bf00      	nop
  }
  while (Delay --);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <RCC_Delay+0x1c>
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e042      	b.n	8002ebc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd ff40 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f971 	bl	8003150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d175      	bne.n	8002fd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_UART_Transmit+0x2c>
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e06e      	b.n	8002fd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2221      	movs	r2, #33	; 0x21
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f02:	f7fe f88d 	bl	8001020 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d108      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f38:	e02e      	b.n	8002f98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f848 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e03a      	b.n	8002fd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1cb      	bne.n	8002f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f814 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e006      	b.n	8002fd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fea:	e03b      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d037      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe f814 	bl	8001020 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <UART_WaitOnFlagUntilTimeout+0x30>
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e03a      	b.n	8003084 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d023      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d020      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d01d      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b08      	cmp	r3, #8
 8003034:	d116      	bne.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f81d 	bl	800308c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2208      	movs	r2, #8
 8003056:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e00f      	b.n	8003084 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	429a      	cmp	r2, r3
 8003080:	d0b4      	beq.n	8002fec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b095      	sub	sp, #84	; 0x54
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b4:	643a      	str	r2, [r7, #64]	; 0x40
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e5      	bne.n	8003094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3314      	adds	r3, #20
 80030ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e5      	bne.n	80030c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	2b01      	cmp	r3, #1
 8003102:	d119      	bne.n	8003138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60bb      	str	r3, [r7, #8]
   return(result);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	647b      	str	r3, [r7, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003124:	61ba      	str	r2, [r7, #24]
 8003126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	613b      	str	r3, [r7, #16]
   return(result);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e5      	bne.n	8003104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003146:	bf00      	nop
 8003148:	3754      	adds	r7, #84	; 0x54
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800318a:	f023 030c 	bic.w	r3, r3, #12
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	430b      	orrs	r3, r1
 8003196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <UART_SetConfig+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7ff fe02 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	e002      	b.n	80031c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7ff fdea 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 80031c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <UART_SetConfig+0x118>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	0119      	lsls	r1, r3, #4
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <UART_SetConfig+0x118>)
 80031fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2064      	movs	r0, #100	; 0x64
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	; 0x32
 8003210:	4a15      	ldr	r2, [pc, #84]	; (8003268 <UART_SetConfig+0x118>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	4419      	add	r1, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <UART_SetConfig+0x118>)
 8003236:	fba3 0302 	umull	r0, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2064      	movs	r0, #100	; 0x64
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	4a07      	ldr	r2, [pc, #28]	; (8003268 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	440a      	add	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40013800 	.word	0x40013800
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fc9c 	bl	8003bca <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3384      	adds	r3, #132	; 0x84
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fc95 	bl	8003bca <memset>
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	460b      	mov	r3, r1
 80032b6:	72fb      	strb	r3, [r7, #11]
 80032b8:	4613      	mov	r3, r2
 80032ba:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	3301      	adds	r3, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 faaf 	bl	8003824 <malloc>
 80032c6:	4603      	mov	r3, r0
 80032c8:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	7afa      	ldrb	r2, [r7, #11]
 80032ce:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <max30102_write+0x42>
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fcfc 	bl	8003ce2 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	21ae      	movs	r1, #174	; 0xae
 80032fe:	f7fe fa91 	bl	8001824 <HAL_I2C_Master_Transmit>
    free(payload);
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f000 fa96 	bl	8003834 <free>
}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	460b      	mov	r3, r1
 800331e:	72fb      	strb	r3, [r7, #11]
 8003320:	4613      	mov	r3, r2
 8003322:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	f107 0217 	add.w	r2, r7, #23
 8003330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	21ae      	movs	r1, #174	; 0xae
 800333a:	f7fe fa73 	bl	8001824 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003348:	9200      	str	r2, [sp, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	21ae      	movs	r1, #174	; 0xae
 800334e:	f7fe fb67 	bl	8001a20 <HAL_I2C_Master_Receive>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8003362:	2340      	movs	r3, #64	; 0x40
 8003364:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003366:	f107 020f 	add.w	r2, r7, #15
 800336a:	2301      	movs	r3, #1
 800336c:	2109      	movs	r1, #9
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff9a 	bl	80032a8 <max30102_write>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800338c:	f107 020f 	add.w	r2, r7, #15
 8003390:	2301      	movs	r3, #1
 8003392:	2102      	movs	r1, #2
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffbb 	bl	8003310 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	01db      	lsls	r3, r3, #7
 80033a8:	b25a      	sxtb	r2, r3
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b25b      	sxtb	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80033b6:	f107 020f 	add.w	r2, r7, #15
 80033ba:	2301      	movs	r3, #1
 80033bc:	2102      	movs	r1, #2
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff72 	bl	80032a8 <max30102_write>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80033e6:	f107 020f 	add.w	r2, r7, #15
 80033ea:	2301      	movs	r3, #1
 80033ec:	2103      	movs	r1, #3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff5a 	bl	80032a8 <max30102_write>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	b2db      	uxtb	r3, r3
 8003414:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8003416:	f107 020f 	add.w	r2, r7, #15
 800341a:	2301      	movs	r3, #1
 800341c:	2121      	movs	r1, #33	; 0x21
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff42 	bl	80032a8 <max30102_write>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8003466:	2300      	movs	r3, #0
 8003468:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800346a:	f107 020c 	add.w	r2, r7, #12
 800346e:	2302      	movs	r3, #2
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ff4c 	bl	8003310 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8003478:	7b3b      	ldrb	r3, [r7, #12]
 800347a:	09db      	lsrs	r3, r3, #7
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f94f 	bl	800372a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800348c:	7b7b      	ldrb	r3, [r7, #13]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800349a:	f107 020a 	add.w	r2, r7, #10
 800349e:	f107 030b 	add.w	r3, r7, #11
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f9a7 	bl	80037f8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80034c6:	f107 020f 	add.w	r2, r7, #15
 80034ca:	2301      	movs	r3, #1
 80034cc:	2109      	movs	r1, #9
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff1e 	bl	8003310 <max30102_read>
    config = (config & 0xf8) | mode;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80034ea:	f107 020f 	add.w	r2, r7, #15
 80034ee:	2301      	movs	r3, #1
 80034f0:	2109      	movs	r1, #9
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fed8 	bl	80032a8 <max30102_write>
    max30102_clear_fifo(obj);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8f7 	bl	80036ec <max30102_clear_fifo>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003512:	f107 020f 	add.w	r2, r7, #15
 8003516:	2301      	movs	r3, #1
 8003518:	210a      	movs	r1, #10
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fef8 	bl	8003310 <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800352a:	b2db      	uxtb	r3, r3
 800352c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800352e:	f107 020f 	add.w	r2, r7, #15
 8003532:	2301      	movs	r3, #1
 8003534:	210a      	movs	r1, #10
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff feb6 	bl	80032a8 <max30102_write>
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003550:	f107 020f 	add.w	r2, r7, #15
 8003554:	2301      	movs	r3, #1
 8003556:	210a      	movs	r1, #10
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fed9 	bl	8003310 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003566:	b25a      	sxtb	r2, r3
 8003568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356c:	4313      	orrs	r3, r2
 800356e:	b25b      	sxtb	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003574:	f107 020f 	add.w	r2, r7, #15
 8003578:	2301      	movs	r3, #1
 800357a:	210a      	movs	r1, #10
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fe93 	bl	80032a8 <max30102_write>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003596:	f107 020f 	add.w	r2, r7, #15
 800359a:	2301      	movs	r3, #1
 800359c:	210a      	movs	r1, #10
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff feb6 	bl	8003310 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	b25a      	sxtb	r2, r3
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	b25b      	sxtb	r3, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80035bc:	f107 020f 	add.w	r2, r7, #15
 80035c0:	2301      	movs	r3, #1
 80035c2:	210a      	movs	r1, #10
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fe6f 	bl	80032a8 <max30102_write>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	0000      	movs	r0, r0
 80035d4:	0000      	movs	r0, r0
	...

080035d8 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f7fc ff18 	bl	8000418 <__aeabi_f2d>
 80035e8:	a30d      	add	r3, pc, #52	; (adr r3, 8003620 <max30102_set_led_current_1+0x48>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fd f895 	bl	800071c <__aeabi_ddiv>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7fd f977 	bl	80008ec <__aeabi_d2uiz>
 80035fe:	4603      	mov	r3, r0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003604:	f107 020f 	add.w	r2, r7, #15
 8003608:	2301      	movs	r3, #1
 800360a:	210c      	movs	r1, #12
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fe4b 	bl	80032a8 <max30102_write>
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	f3af 8000 	nop.w
 8003620:	9999999a 	.word	0x9999999a
 8003624:	3fc99999 	.word	0x3fc99999

08003628 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f7fc fef0 	bl	8000418 <__aeabi_f2d>
 8003638:	a30d      	add	r3, pc, #52	; (adr r3, 8003670 <max30102_set_led_current_2+0x48>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fd f86d 	bl	800071c <__aeabi_ddiv>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd f94f 	bl	80008ec <__aeabi_d2uiz>
 800364e:	4603      	mov	r3, r0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8003654:	f107 020f 	add.w	r2, r7, #15
 8003658:	2301      	movs	r3, #1
 800365a:	210d      	movs	r1, #13
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fe23 	bl	80032a8 <max30102_write>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	f3af 8000 	nop.w
 8003670:	9999999a 	.word	0x9999999a
 8003674:	3fc99999 	.word	0x3fc99999

08003678 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4603      	mov	r3, r0
 8003688:	70fb      	strb	r3, [r7, #3]
 800368a:	460b      	mov	r3, r1
 800368c:	70bb      	strb	r3, [r7, #2]
 800368e:	4613      	mov	r3, r2
 8003690:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	b25a      	sxtb	r2, r3
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80036a8:	78bb      	ldrb	r3, [r7, #2]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	b25a      	sxtb	r2, r3
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80036c0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	b25a      	sxtb	r2, r3
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80036d6:	f107 020f 	add.w	r2, r7, #15
 80036da:	2301      	movs	r3, #1
 80036dc:	2108      	movs	r1, #8
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fde2 	bl	80032a8 <max30102_write>
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80036f8:	f107 020f 	add.w	r2, r7, #15
 80036fc:	2303      	movs	r3, #3
 80036fe:	2104      	movs	r1, #4
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fdd1 	bl	80032a8 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8003706:	f107 020f 	add.w	r2, r7, #15
 800370a:	2303      	movs	r3, #3
 800370c:	2106      	movs	r1, #6
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fdca 	bl	80032a8 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8003714:	f107 020f 	add.w	r2, r7, #15
 8003718:	2303      	movs	r3, #3
 800371a:	2105      	movs	r1, #5
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fdc3 	bl	80032a8 <max30102_write>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	74fb      	strb	r3, [r7, #19]
 8003736:	2300      	movs	r3, #0
 8003738:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800373a:	f107 0213 	add.w	r2, r7, #19
 800373e:	2301      	movs	r3, #1
 8003740:	2104      	movs	r1, #4
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fde4 	bl	8003310 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8003748:	f107 0212 	add.w	r2, r7, #18
 800374c:	2301      	movs	r3, #1
 800374e:	2106      	movs	r1, #6
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fddd 	bl	8003310 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8003756:	7cfa      	ldrb	r2, [r7, #19]
 8003758:	7cbb      	ldrb	r3, [r7, #18]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8003760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003764:	2b00      	cmp	r3, #0
 8003766:	dc03      	bgt.n	8003770 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8003768:	7ffb      	ldrb	r3, [r7, #31]
 800376a:	3320      	adds	r3, #32
 800376c:	b2db      	uxtb	r3, r3
 800376e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	77bb      	strb	r3, [r7, #30]
 8003774:	e035      	b.n	80037e2 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8003776:	f107 020c 	add.w	r2, r7, #12
 800377a:	2306      	movs	r3, #6
 800377c:	2107      	movs	r1, #7
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fdc6 	bl	8003310 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8003784:	7b3b      	ldrb	r3, [r7, #12]
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	461a      	mov	r2, r3
 800378a:	7b7b      	ldrb	r3, [r7, #13]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	4313      	orrs	r3, r2
 8003790:	7bba      	ldrb	r2, [r7, #14]
 8003792:	4313      	orrs	r3, r2
 8003794:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003798:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	461a      	mov	r2, r3
 80037a0:	7c3b      	ldrb	r3, [r7, #16]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	4313      	orrs	r3, r2
 80037a6:	7c7a      	ldrb	r2, [r7, #17]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037ae:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80037b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80037be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	3320      	adds	r3, #32
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	69b8      	ldr	r0, [r7, #24]
 80037d2:	f7fd f8c1 	bl	8000958 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80037d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	77bb      	strb	r3, [r7, #30]
 80037e2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80037e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	dbc3      	blt.n	8003776 <max30102_read_fifo+0x4c>
    }
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8003804:	2301      	movs	r3, #1
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	211f      	movs	r1, #31
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fd80 	bl	8003310 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8003810:	2301      	movs	r3, #1
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	2120      	movs	r1, #32
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fd7a 	bl	8003310 <max30102_read>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <malloc>:
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <malloc+0xc>)
 8003826:	4601      	mov	r1, r0
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	f000 b82b 	b.w	8003884 <_malloc_r>
 800382e:	bf00      	nop
 8003830:	20000064 	.word	0x20000064

08003834 <free>:
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <free+0xc>)
 8003836:	4601      	mov	r1, r0
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f000 ba61 	b.w	8003d00 <_free_r>
 800383e:	bf00      	nop
 8003840:	20000064 	.word	0x20000064

08003844 <sbrk_aligned>:
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	4e0e      	ldr	r6, [pc, #56]	; (8003880 <sbrk_aligned+0x3c>)
 8003848:	460c      	mov	r4, r1
 800384a:	6831      	ldr	r1, [r6, #0]
 800384c:	4605      	mov	r5, r0
 800384e:	b911      	cbnz	r1, 8003856 <sbrk_aligned+0x12>
 8003850:	f000 f9f8 	bl	8003c44 <_sbrk_r>
 8003854:	6030      	str	r0, [r6, #0]
 8003856:	4621      	mov	r1, r4
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f9f3 	bl	8003c44 <_sbrk_r>
 800385e:	1c43      	adds	r3, r0, #1
 8003860:	d00a      	beq.n	8003878 <sbrk_aligned+0x34>
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d007      	beq.n	800387c <sbrk_aligned+0x38>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f9e8 	bl	8003c44 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d101      	bne.n	800387c <sbrk_aligned+0x38>
 8003878:	f04f 34ff 	mov.w	r4, #4294967295
 800387c:	4620      	mov	r0, r4
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	20000234 	.word	0x20000234

08003884 <_malloc_r>:
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003888:	1ccd      	adds	r5, r1, #3
 800388a:	f025 0503 	bic.w	r5, r5, #3
 800388e:	3508      	adds	r5, #8
 8003890:	2d0c      	cmp	r5, #12
 8003892:	bf38      	it	cc
 8003894:	250c      	movcc	r5, #12
 8003896:	2d00      	cmp	r5, #0
 8003898:	4607      	mov	r7, r0
 800389a:	db01      	blt.n	80038a0 <_malloc_r+0x1c>
 800389c:	42a9      	cmp	r1, r5
 800389e:	d905      	bls.n	80038ac <_malloc_r+0x28>
 80038a0:	230c      	movs	r3, #12
 80038a2:	2600      	movs	r6, #0
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4630      	mov	r0, r6
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003980 <_malloc_r+0xfc>
 80038b0:	f000 f868 	bl	8003984 <__malloc_lock>
 80038b4:	f8d8 3000 	ldr.w	r3, [r8]
 80038b8:	461c      	mov	r4, r3
 80038ba:	bb5c      	cbnz	r4, 8003914 <_malloc_r+0x90>
 80038bc:	4629      	mov	r1, r5
 80038be:	4638      	mov	r0, r7
 80038c0:	f7ff ffc0 	bl	8003844 <sbrk_aligned>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	4604      	mov	r4, r0
 80038c8:	d155      	bne.n	8003976 <_malloc_r+0xf2>
 80038ca:	f8d8 4000 	ldr.w	r4, [r8]
 80038ce:	4626      	mov	r6, r4
 80038d0:	2e00      	cmp	r6, #0
 80038d2:	d145      	bne.n	8003960 <_malloc_r+0xdc>
 80038d4:	2c00      	cmp	r4, #0
 80038d6:	d048      	beq.n	800396a <_malloc_r+0xe6>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	4631      	mov	r1, r6
 80038dc:	4638      	mov	r0, r7
 80038de:	eb04 0903 	add.w	r9, r4, r3
 80038e2:	f000 f9af 	bl	8003c44 <_sbrk_r>
 80038e6:	4581      	cmp	r9, r0
 80038e8:	d13f      	bne.n	800396a <_malloc_r+0xe6>
 80038ea:	6821      	ldr	r1, [r4, #0]
 80038ec:	4638      	mov	r0, r7
 80038ee:	1a6d      	subs	r5, r5, r1
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7ff ffa7 	bl	8003844 <sbrk_aligned>
 80038f6:	3001      	adds	r0, #1
 80038f8:	d037      	beq.n	800396a <_malloc_r+0xe6>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	442b      	add	r3, r5
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	f8d8 3000 	ldr.w	r3, [r8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d038      	beq.n	800397a <_malloc_r+0xf6>
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	42a2      	cmp	r2, r4
 800390c:	d12b      	bne.n	8003966 <_malloc_r+0xe2>
 800390e:	2200      	movs	r2, #0
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e00f      	b.n	8003934 <_malloc_r+0xb0>
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	1b52      	subs	r2, r2, r5
 8003918:	d41f      	bmi.n	800395a <_malloc_r+0xd6>
 800391a:	2a0b      	cmp	r2, #11
 800391c:	d917      	bls.n	800394e <_malloc_r+0xca>
 800391e:	1961      	adds	r1, r4, r5
 8003920:	42a3      	cmp	r3, r4
 8003922:	6025      	str	r5, [r4, #0]
 8003924:	bf18      	it	ne
 8003926:	6059      	strne	r1, [r3, #4]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	bf08      	it	eq
 800392c:	f8c8 1000 	streq.w	r1, [r8]
 8003930:	5162      	str	r2, [r4, r5]
 8003932:	604b      	str	r3, [r1, #4]
 8003934:	4638      	mov	r0, r7
 8003936:	f104 060b 	add.w	r6, r4, #11
 800393a:	f000 f829 	bl	8003990 <__malloc_unlock>
 800393e:	f026 0607 	bic.w	r6, r6, #7
 8003942:	1d23      	adds	r3, r4, #4
 8003944:	1af2      	subs	r2, r6, r3
 8003946:	d0ae      	beq.n	80038a6 <_malloc_r+0x22>
 8003948:	1b9b      	subs	r3, r3, r6
 800394a:	50a3      	str	r3, [r4, r2]
 800394c:	e7ab      	b.n	80038a6 <_malloc_r+0x22>
 800394e:	42a3      	cmp	r3, r4
 8003950:	6862      	ldr	r2, [r4, #4]
 8003952:	d1dd      	bne.n	8003910 <_malloc_r+0x8c>
 8003954:	f8c8 2000 	str.w	r2, [r8]
 8003958:	e7ec      	b.n	8003934 <_malloc_r+0xb0>
 800395a:	4623      	mov	r3, r4
 800395c:	6864      	ldr	r4, [r4, #4]
 800395e:	e7ac      	b.n	80038ba <_malloc_r+0x36>
 8003960:	4634      	mov	r4, r6
 8003962:	6876      	ldr	r6, [r6, #4]
 8003964:	e7b4      	b.n	80038d0 <_malloc_r+0x4c>
 8003966:	4613      	mov	r3, r2
 8003968:	e7cc      	b.n	8003904 <_malloc_r+0x80>
 800396a:	230c      	movs	r3, #12
 800396c:	4638      	mov	r0, r7
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	f000 f80e 	bl	8003990 <__malloc_unlock>
 8003974:	e797      	b.n	80038a6 <_malloc_r+0x22>
 8003976:	6025      	str	r5, [r4, #0]
 8003978:	e7dc      	b.n	8003934 <_malloc_r+0xb0>
 800397a:	605b      	str	r3, [r3, #4]
 800397c:	deff      	udf	#255	; 0xff
 800397e:	bf00      	nop
 8003980:	20000230 	.word	0x20000230

08003984 <__malloc_lock>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__malloc_lock+0x8>)
 8003986:	f000 b9aa 	b.w	8003cde <__retarget_lock_acquire_recursive>
 800398a:	bf00      	nop
 800398c:	20000378 	.word	0x20000378

08003990 <__malloc_unlock>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__malloc_unlock+0x8>)
 8003992:	f000 b9a5 	b.w	8003ce0 <__retarget_lock_release_recursive>
 8003996:	bf00      	nop
 8003998:	20000378 	.word	0x20000378

0800399c <std>:
 800399c:	2300      	movs	r3, #0
 800399e:	b510      	push	{r4, lr}
 80039a0:	4604      	mov	r4, r0
 80039a2:	e9c0 3300 	strd	r3, r3, [r0]
 80039a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039aa:	6083      	str	r3, [r0, #8]
 80039ac:	8181      	strh	r1, [r0, #12]
 80039ae:	6643      	str	r3, [r0, #100]	; 0x64
 80039b0:	81c2      	strh	r2, [r0, #14]
 80039b2:	6183      	str	r3, [r0, #24]
 80039b4:	4619      	mov	r1, r3
 80039b6:	2208      	movs	r2, #8
 80039b8:	305c      	adds	r0, #92	; 0x5c
 80039ba:	f000 f906 	bl	8003bca <memset>
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <std+0x58>)
 80039c0:	6224      	str	r4, [r4, #32]
 80039c2:	6263      	str	r3, [r4, #36]	; 0x24
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <std+0x5c>)
 80039c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <std+0x60>)
 80039ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <std+0x64>)
 80039ce:	6323      	str	r3, [r4, #48]	; 0x30
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <std+0x68>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	d006      	beq.n	80039e4 <std+0x48>
 80039d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80039da:	4294      	cmp	r4, r2
 80039dc:	d002      	beq.n	80039e4 <std+0x48>
 80039de:	33d0      	adds	r3, #208	; 0xd0
 80039e0:	429c      	cmp	r4, r3
 80039e2:	d105      	bne.n	80039f0 <std+0x54>
 80039e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ec:	f000 b976 	b.w	8003cdc <__retarget_lock_init_recursive>
 80039f0:	bd10      	pop	{r4, pc}
 80039f2:	bf00      	nop
 80039f4:	08003b45 	.word	0x08003b45
 80039f8:	08003b67 	.word	0x08003b67
 80039fc:	08003b9f 	.word	0x08003b9f
 8003a00:	08003bc3 	.word	0x08003bc3
 8003a04:	20000238 	.word	0x20000238

08003a08 <stdio_exit_handler>:
 8003a08:	4a02      	ldr	r2, [pc, #8]	; (8003a14 <stdio_exit_handler+0xc>)
 8003a0a:	4903      	ldr	r1, [pc, #12]	; (8003a18 <stdio_exit_handler+0x10>)
 8003a0c:	4803      	ldr	r0, [pc, #12]	; (8003a1c <stdio_exit_handler+0x14>)
 8003a0e:	f000 b869 	b.w	8003ae4 <_fwalk_sglue>
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	08004441 	.word	0x08004441
 8003a1c:	20000018 	.word	0x20000018

08003a20 <cleanup_stdio>:
 8003a20:	6841      	ldr	r1, [r0, #4]
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <cleanup_stdio+0x34>)
 8003a24:	b510      	push	{r4, lr}
 8003a26:	4299      	cmp	r1, r3
 8003a28:	4604      	mov	r4, r0
 8003a2a:	d001      	beq.n	8003a30 <cleanup_stdio+0x10>
 8003a2c:	f000 fd08 	bl	8004440 <_fflush_r>
 8003a30:	68a1      	ldr	r1, [r4, #8]
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <cleanup_stdio+0x38>)
 8003a34:	4299      	cmp	r1, r3
 8003a36:	d002      	beq.n	8003a3e <cleanup_stdio+0x1e>
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 fd01 	bl	8004440 <_fflush_r>
 8003a3e:	68e1      	ldr	r1, [r4, #12]
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <cleanup_stdio+0x3c>)
 8003a42:	4299      	cmp	r1, r3
 8003a44:	d004      	beq.n	8003a50 <cleanup_stdio+0x30>
 8003a46:	4620      	mov	r0, r4
 8003a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a4c:	f000 bcf8 	b.w	8004440 <_fflush_r>
 8003a50:	bd10      	pop	{r4, pc}
 8003a52:	bf00      	nop
 8003a54:	20000238 	.word	0x20000238
 8003a58:	200002a0 	.word	0x200002a0
 8003a5c:	20000308 	.word	0x20000308

08003a60 <global_stdio_init.part.0>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <global_stdio_init.part.0+0x30>)
 8003a64:	4c0b      	ldr	r4, [pc, #44]	; (8003a94 <global_stdio_init.part.0+0x34>)
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <global_stdio_init.part.0+0x38>)
 8003a68:	4620      	mov	r0, r4
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f7ff ff94 	bl	800399c <std>
 8003a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a78:	2201      	movs	r2, #1
 8003a7a:	2109      	movs	r1, #9
 8003a7c:	f7ff ff8e 	bl	800399c <std>
 8003a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a84:	2202      	movs	r2, #2
 8003a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a8a:	2112      	movs	r1, #18
 8003a8c:	f7ff bf86 	b.w	800399c <std>
 8003a90:	20000370 	.word	0x20000370
 8003a94:	20000238 	.word	0x20000238
 8003a98:	08003a09 	.word	0x08003a09

08003a9c <__sfp_lock_acquire>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__sfp_lock_acquire+0x8>)
 8003a9e:	f000 b91e 	b.w	8003cde <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20000379 	.word	0x20000379

08003aa8 <__sfp_lock_release>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__sfp_lock_release+0x8>)
 8003aaa:	f000 b919 	b.w	8003ce0 <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	20000379 	.word	0x20000379

08003ab4 <__sinit>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	f7ff fff0 	bl	8003a9c <__sfp_lock_acquire>
 8003abc:	6a23      	ldr	r3, [r4, #32]
 8003abe:	b11b      	cbz	r3, 8003ac8 <__sinit+0x14>
 8003ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac4:	f7ff bff0 	b.w	8003aa8 <__sfp_lock_release>
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__sinit+0x28>)
 8003aca:	6223      	str	r3, [r4, #32]
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__sinit+0x2c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f5      	bne.n	8003ac0 <__sinit+0xc>
 8003ad4:	f7ff ffc4 	bl	8003a60 <global_stdio_init.part.0>
 8003ad8:	e7f2      	b.n	8003ac0 <__sinit+0xc>
 8003ada:	bf00      	nop
 8003adc:	08003a21 	.word	0x08003a21
 8003ae0:	20000370 	.word	0x20000370

08003ae4 <_fwalk_sglue>:
 8003ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae8:	4607      	mov	r7, r0
 8003aea:	4688      	mov	r8, r1
 8003aec:	4614      	mov	r4, r2
 8003aee:	2600      	movs	r6, #0
 8003af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003af4:	f1b9 0901 	subs.w	r9, r9, #1
 8003af8:	d505      	bpl.n	8003b06 <_fwalk_sglue+0x22>
 8003afa:	6824      	ldr	r4, [r4, #0]
 8003afc:	2c00      	cmp	r4, #0
 8003afe:	d1f7      	bne.n	8003af0 <_fwalk_sglue+0xc>
 8003b00:	4630      	mov	r0, r6
 8003b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b06:	89ab      	ldrh	r3, [r5, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d907      	bls.n	8003b1c <_fwalk_sglue+0x38>
 8003b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b10:	3301      	adds	r3, #1
 8003b12:	d003      	beq.n	8003b1c <_fwalk_sglue+0x38>
 8003b14:	4629      	mov	r1, r5
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	4306      	orrs	r6, r0
 8003b1c:	3568      	adds	r5, #104	; 0x68
 8003b1e:	e7e9      	b.n	8003af4 <_fwalk_sglue+0x10>

08003b20 <iprintf>:
 8003b20:	b40f      	push	{r0, r1, r2, r3}
 8003b22:	b507      	push	{r0, r1, r2, lr}
 8003b24:	4906      	ldr	r1, [pc, #24]	; (8003b40 <iprintf+0x20>)
 8003b26:	ab04      	add	r3, sp, #16
 8003b28:	6808      	ldr	r0, [r1, #0]
 8003b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b2e:	6881      	ldr	r1, [r0, #8]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	f000 f955 	bl	8003de0 <_vfiprintf_r>
 8003b36:	b003      	add	sp, #12
 8003b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b3c:	b004      	add	sp, #16
 8003b3e:	4770      	bx	lr
 8003b40:	20000064 	.word	0x20000064

08003b44 <__sread>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	460c      	mov	r4, r1
 8003b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4c:	f000 f868 	bl	8003c20 <_read_r>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	bfab      	itete	ge
 8003b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b56:	89a3      	ldrhlt	r3, [r4, #12]
 8003b58:	181b      	addge	r3, r3, r0
 8003b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b5e:	bfac      	ite	ge
 8003b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b62:	81a3      	strhlt	r3, [r4, #12]
 8003b64:	bd10      	pop	{r4, pc}

08003b66 <__swrite>:
 8003b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	461f      	mov	r7, r3
 8003b6c:	898b      	ldrh	r3, [r1, #12]
 8003b6e:	4605      	mov	r5, r0
 8003b70:	05db      	lsls	r3, r3, #23
 8003b72:	460c      	mov	r4, r1
 8003b74:	4616      	mov	r6, r2
 8003b76:	d505      	bpl.n	8003b84 <__swrite+0x1e>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b80:	f000 f83c 	bl	8003bfc <_lseek_r>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	4632      	mov	r2, r6
 8003b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b8c:	81a3      	strh	r3, [r4, #12]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	463b      	mov	r3, r7
 8003b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9a:	f000 b863 	b.w	8003c64 <_write_r>

08003b9e <__sseek>:
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba6:	f000 f829 	bl	8003bfc <_lseek_r>
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	bf15      	itete	ne
 8003bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bba:	81a3      	strheq	r3, [r4, #12]
 8003bbc:	bf18      	it	ne
 8003bbe:	81a3      	strhne	r3, [r4, #12]
 8003bc0:	bd10      	pop	{r4, pc}

08003bc2 <__sclose>:
 8003bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc6:	f000 b809 	b.w	8003bdc <_close_r>

08003bca <memset>:
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4402      	add	r2, r0
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d100      	bne.n	8003bd4 <memset+0xa>
 8003bd2:	4770      	bx	lr
 8003bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd8:	e7f9      	b.n	8003bce <memset+0x4>
	...

08003bdc <_close_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_close_r+0x1c>)
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fd f92f 	bl	8000e4a <_close>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_close_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_close_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20000374 	.word	0x20000374

08003bfc <_lseek_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	4d05      	ldr	r5, [pc, #20]	; (8003c1c <_lseek_r+0x20>)
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f7fd f941 	bl	8000e92 <_lseek>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_lseek_r+0x1e>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_lseek_r+0x1e>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	20000374 	.word	0x20000374

08003c20 <_read_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4d05      	ldr	r5, [pc, #20]	; (8003c40 <_read_r+0x20>)
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fd f8d2 	bl	8000dd8 <_read>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_read_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_read_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	20000374 	.word	0x20000374

08003c44 <_sbrk_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	2300      	movs	r3, #0
 8003c48:	4d05      	ldr	r5, [pc, #20]	; (8003c60 <_sbrk_r+0x1c>)
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fd f92c 	bl	8000eac <_sbrk>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_sbrk_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_sbrk_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	20000374 	.word	0x20000374

08003c64 <_write_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4d05      	ldr	r5, [pc, #20]	; (8003c84 <_write_r+0x20>)
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7fd f8cd 	bl	8000e12 <_write>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_write_r+0x1e>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_write_r+0x1e>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	20000374 	.word	0x20000374

08003c88 <__errno>:
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <__errno+0x8>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000064 	.word	0x20000064

08003c94 <__libc_init_array>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	2600      	movs	r6, #0
 8003c98:	4d0c      	ldr	r5, [pc, #48]	; (8003ccc <__libc_init_array+0x38>)
 8003c9a:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <__libc_init_array+0x3c>)
 8003c9c:	1b64      	subs	r4, r4, r5
 8003c9e:	10a4      	asrs	r4, r4, #2
 8003ca0:	42a6      	cmp	r6, r4
 8003ca2:	d109      	bne.n	8003cb8 <__libc_init_array+0x24>
 8003ca4:	f000 fd1c 	bl	80046e0 <_init>
 8003ca8:	2600      	movs	r6, #0
 8003caa:	4d0a      	ldr	r5, [pc, #40]	; (8003cd4 <__libc_init_array+0x40>)
 8003cac:	4c0a      	ldr	r4, [pc, #40]	; (8003cd8 <__libc_init_array+0x44>)
 8003cae:	1b64      	subs	r4, r4, r5
 8003cb0:	10a4      	asrs	r4, r4, #2
 8003cb2:	42a6      	cmp	r6, r4
 8003cb4:	d105      	bne.n	8003cc2 <__libc_init_array+0x2e>
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbc:	4798      	blx	r3
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7ee      	b.n	8003ca0 <__libc_init_array+0xc>
 8003cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc6:	4798      	blx	r3
 8003cc8:	3601      	adds	r6, #1
 8003cca:	e7f2      	b.n	8003cb2 <__libc_init_array+0x1e>
 8003ccc:	08004764 	.word	0x08004764
 8003cd0:	08004764 	.word	0x08004764
 8003cd4:	08004764 	.word	0x08004764
 8003cd8:	08004768 	.word	0x08004768

08003cdc <__retarget_lock_init_recursive>:
 8003cdc:	4770      	bx	lr

08003cde <__retarget_lock_acquire_recursive>:
 8003cde:	4770      	bx	lr

08003ce0 <__retarget_lock_release_recursive>:
 8003ce0:	4770      	bx	lr

08003ce2 <memcpy>:
 8003ce2:	440a      	add	r2, r1
 8003ce4:	4291      	cmp	r1, r2
 8003ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cea:	d100      	bne.n	8003cee <memcpy+0xc>
 8003cec:	4770      	bx	lr
 8003cee:	b510      	push	{r4, lr}
 8003cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf4:	4291      	cmp	r1, r2
 8003cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfa:	d1f9      	bne.n	8003cf0 <memcpy+0xe>
 8003cfc:	bd10      	pop	{r4, pc}
	...

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d040      	beq.n	8003d8a <_free_r+0x8a>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f7ff fe36 	bl	8003984 <__malloc_lock>
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <_free_r+0x8c>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	b933      	cbnz	r3, 8003d2c <_free_r+0x2c>
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6014      	str	r4, [r2, #0]
 8003d22:	4628      	mov	r0, r5
 8003d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d28:	f7ff be32 	b.w	8003990 <__malloc_unlock>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d908      	bls.n	8003d42 <_free_r+0x42>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	1821      	adds	r1, r4, r0
 8003d34:	428b      	cmp	r3, r1
 8003d36:	bf01      	itttt	eq
 8003d38:	6819      	ldreq	r1, [r3, #0]
 8003d3a:	685b      	ldreq	r3, [r3, #4]
 8003d3c:	1809      	addeq	r1, r1, r0
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	e7ed      	b.n	8003d1e <_free_r+0x1e>
 8003d42:	461a      	mov	r2, r3
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b10b      	cbz	r3, 8003d4c <_free_r+0x4c>
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d9fa      	bls.n	8003d42 <_free_r+0x42>
 8003d4c:	6811      	ldr	r1, [r2, #0]
 8003d4e:	1850      	adds	r0, r2, r1
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d10b      	bne.n	8003d6c <_free_r+0x6c>
 8003d54:	6820      	ldr	r0, [r4, #0]
 8003d56:	4401      	add	r1, r0
 8003d58:	1850      	adds	r0, r2, r1
 8003d5a:	4283      	cmp	r3, r0
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	d1e0      	bne.n	8003d22 <_free_r+0x22>
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4408      	add	r0, r1
 8003d66:	6010      	str	r0, [r2, #0]
 8003d68:	6053      	str	r3, [r2, #4]
 8003d6a:	e7da      	b.n	8003d22 <_free_r+0x22>
 8003d6c:	d902      	bls.n	8003d74 <_free_r+0x74>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	602b      	str	r3, [r5, #0]
 8003d72:	e7d6      	b.n	8003d22 <_free_r+0x22>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	1821      	adds	r1, r4, r0
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	bf01      	itttt	eq
 8003d7c:	6819      	ldreq	r1, [r3, #0]
 8003d7e:	685b      	ldreq	r3, [r3, #4]
 8003d80:	1809      	addeq	r1, r1, r0
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	6054      	str	r4, [r2, #4]
 8003d88:	e7cb      	b.n	8003d22 <_free_r+0x22>
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000230 	.word	0x20000230

08003d90 <__sfputc_r>:
 8003d90:	6893      	ldr	r3, [r2, #8]
 8003d92:	b410      	push	{r4}
 8003d94:	3b01      	subs	r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	da07      	bge.n	8003dac <__sfputc_r+0x1c>
 8003d9c:	6994      	ldr	r4, [r2, #24]
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	db01      	blt.n	8003da6 <__sfputc_r+0x16>
 8003da2:	290a      	cmp	r1, #10
 8003da4:	d102      	bne.n	8003dac <__sfputc_r+0x1c>
 8003da6:	bc10      	pop	{r4}
 8003da8:	f000 bb72 	b.w	8004490 <__swbuf_r>
 8003dac:	6813      	ldr	r3, [r2, #0]
 8003dae:	1c58      	adds	r0, r3, #1
 8003db0:	6010      	str	r0, [r2, #0]
 8003db2:	7019      	strb	r1, [r3, #0]
 8003db4:	4608      	mov	r0, r1
 8003db6:	bc10      	pop	{r4}
 8003db8:	4770      	bx	lr

08003dba <__sfputs_r>:
 8003dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	18d5      	adds	r5, r2, r3
 8003dc4:	42ac      	cmp	r4, r5
 8003dc6:	d101      	bne.n	8003dcc <__sfputs_r+0x12>
 8003dc8:	2000      	movs	r0, #0
 8003dca:	e007      	b.n	8003ddc <__sfputs_r+0x22>
 8003dcc:	463a      	mov	r2, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd4:	f7ff ffdc 	bl	8003d90 <__sfputc_r>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d1f3      	bne.n	8003dc4 <__sfputs_r+0xa>
 8003ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003de0 <_vfiprintf_r>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	460d      	mov	r5, r1
 8003de6:	4614      	mov	r4, r2
 8003de8:	4698      	mov	r8, r3
 8003dea:	4606      	mov	r6, r0
 8003dec:	b09d      	sub	sp, #116	; 0x74
 8003dee:	b118      	cbz	r0, 8003df8 <_vfiprintf_r+0x18>
 8003df0:	6a03      	ldr	r3, [r0, #32]
 8003df2:	b90b      	cbnz	r3, 8003df8 <_vfiprintf_r+0x18>
 8003df4:	f7ff fe5e 	bl	8003ab4 <__sinit>
 8003df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dfa:	07d9      	lsls	r1, r3, #31
 8003dfc:	d405      	bmi.n	8003e0a <_vfiprintf_r+0x2a>
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	059a      	lsls	r2, r3, #22
 8003e02:	d402      	bmi.n	8003e0a <_vfiprintf_r+0x2a>
 8003e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e06:	f7ff ff6a 	bl	8003cde <__retarget_lock_acquire_recursive>
 8003e0a:	89ab      	ldrh	r3, [r5, #12]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	d501      	bpl.n	8003e14 <_vfiprintf_r+0x34>
 8003e10:	692b      	ldr	r3, [r5, #16]
 8003e12:	b99b      	cbnz	r3, 8003e3c <_vfiprintf_r+0x5c>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 fb78 	bl	800450c <__swsetup_r>
 8003e1c:	b170      	cbz	r0, 8003e3c <_vfiprintf_r+0x5c>
 8003e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e20:	07dc      	lsls	r4, r3, #31
 8003e22:	d504      	bpl.n	8003e2e <_vfiprintf_r+0x4e>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	b01d      	add	sp, #116	; 0x74
 8003e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	0598      	lsls	r0, r3, #22
 8003e32:	d4f7      	bmi.n	8003e24 <_vfiprintf_r+0x44>
 8003e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e36:	f7ff ff53 	bl	8003ce0 <__retarget_lock_release_recursive>
 8003e3a:	e7f3      	b.n	8003e24 <_vfiprintf_r+0x44>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	2320      	movs	r3, #32
 8003e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e46:	2330      	movs	r3, #48	; 0x30
 8003e48:	f04f 0901 	mov.w	r9, #1
 8003e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004000 <_vfiprintf_r+0x220>
 8003e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e58:	4623      	mov	r3, r4
 8003e5a:	469a      	mov	sl, r3
 8003e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e60:	b10a      	cbz	r2, 8003e66 <_vfiprintf_r+0x86>
 8003e62:	2a25      	cmp	r2, #37	; 0x25
 8003e64:	d1f9      	bne.n	8003e5a <_vfiprintf_r+0x7a>
 8003e66:	ebba 0b04 	subs.w	fp, sl, r4
 8003e6a:	d00b      	beq.n	8003e84 <_vfiprintf_r+0xa4>
 8003e6c:	465b      	mov	r3, fp
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7ff ffa1 	bl	8003dba <__sfputs_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	f000 80a9 	beq.w	8003fd0 <_vfiprintf_r+0x1f0>
 8003e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e80:	445a      	add	r2, fp
 8003e82:	9209      	str	r2, [sp, #36]	; 0x24
 8003e84:	f89a 3000 	ldrb.w	r3, [sl]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80a1 	beq.w	8003fd0 <_vfiprintf_r+0x1f0>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e98:	f10a 0a01 	add.w	sl, sl, #1
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	9307      	str	r3, [sp, #28]
 8003ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea6:	4654      	mov	r4, sl
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eae:	4854      	ldr	r0, [pc, #336]	; (8004000 <_vfiprintf_r+0x220>)
 8003eb0:	f000 fb84 	bl	80045bc <memchr>
 8003eb4:	9a04      	ldr	r2, [sp, #16]
 8003eb6:	b9d8      	cbnz	r0, 8003ef0 <_vfiprintf_r+0x110>
 8003eb8:	06d1      	lsls	r1, r2, #27
 8003eba:	bf44      	itt	mi
 8003ebc:	2320      	movmi	r3, #32
 8003ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec2:	0713      	lsls	r3, r2, #28
 8003ec4:	bf44      	itt	mi
 8003ec6:	232b      	movmi	r3, #43	; 0x2b
 8003ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed2:	d015      	beq.n	8003f00 <_vfiprintf_r+0x120>
 8003ed4:	4654      	mov	r4, sl
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f04f 0c0a 	mov.w	ip, #10
 8003edc:	9a07      	ldr	r2, [sp, #28]
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee4:	3b30      	subs	r3, #48	; 0x30
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	d94d      	bls.n	8003f86 <_vfiprintf_r+0x1a6>
 8003eea:	b1b0      	cbz	r0, 8003f1a <_vfiprintf_r+0x13a>
 8003eec:	9207      	str	r2, [sp, #28]
 8003eee:	e014      	b.n	8003f1a <_vfiprintf_r+0x13a>
 8003ef0:	eba0 0308 	sub.w	r3, r0, r8
 8003ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	46a2      	mov	sl, r4
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	e7d2      	b.n	8003ea6 <_vfiprintf_r+0xc6>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	1d19      	adds	r1, r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	9103      	str	r1, [sp, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bfbb      	ittet	lt
 8003f0c:	425b      	neglt	r3, r3
 8003f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f12:	9307      	strge	r3, [sp, #28]
 8003f14:	9307      	strlt	r3, [sp, #28]
 8003f16:	bfb8      	it	lt
 8003f18:	9204      	strlt	r2, [sp, #16]
 8003f1a:	7823      	ldrb	r3, [r4, #0]
 8003f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f1e:	d10c      	bne.n	8003f3a <_vfiprintf_r+0x15a>
 8003f20:	7863      	ldrb	r3, [r4, #1]
 8003f22:	2b2a      	cmp	r3, #42	; 0x2a
 8003f24:	d134      	bne.n	8003f90 <_vfiprintf_r+0x1b0>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	3402      	adds	r4, #2
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	9203      	str	r2, [sp, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bfb8      	it	lt
 8003f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004004 <_vfiprintf_r+0x224>
 8003f3e:	2203      	movs	r2, #3
 8003f40:	4650      	mov	r0, sl
 8003f42:	7821      	ldrb	r1, [r4, #0]
 8003f44:	f000 fb3a 	bl	80045bc <memchr>
 8003f48:	b138      	cbz	r0, 8003f5a <_vfiprintf_r+0x17a>
 8003f4a:	2240      	movs	r2, #64	; 0x40
 8003f4c:	9b04      	ldr	r3, [sp, #16]
 8003f4e:	eba0 000a 	sub.w	r0, r0, sl
 8003f52:	4082      	lsls	r2, r0
 8003f54:	4313      	orrs	r3, r2
 8003f56:	3401      	adds	r4, #1
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5e:	2206      	movs	r2, #6
 8003f60:	4829      	ldr	r0, [pc, #164]	; (8004008 <_vfiprintf_r+0x228>)
 8003f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f66:	f000 fb29 	bl	80045bc <memchr>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d03f      	beq.n	8003fee <_vfiprintf_r+0x20e>
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <_vfiprintf_r+0x22c>)
 8003f70:	bb1b      	cbnz	r3, 8003fba <_vfiprintf_r+0x1da>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	3307      	adds	r3, #7
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f80:	443b      	add	r3, r7
 8003f82:	9309      	str	r3, [sp, #36]	; 0x24
 8003f84:	e768      	b.n	8003e58 <_vfiprintf_r+0x78>
 8003f86:	460c      	mov	r4, r1
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f8e:	e7a6      	b.n	8003ede <_vfiprintf_r+0xfe>
 8003f90:	2300      	movs	r3, #0
 8003f92:	f04f 0c0a 	mov.w	ip, #10
 8003f96:	4619      	mov	r1, r3
 8003f98:	3401      	adds	r4, #1
 8003f9a:	9305      	str	r3, [sp, #20]
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa2:	3a30      	subs	r2, #48	; 0x30
 8003fa4:	2a09      	cmp	r2, #9
 8003fa6:	d903      	bls.n	8003fb0 <_vfiprintf_r+0x1d0>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0c6      	beq.n	8003f3a <_vfiprintf_r+0x15a>
 8003fac:	9105      	str	r1, [sp, #20]
 8003fae:	e7c4      	b.n	8003f3a <_vfiprintf_r+0x15a>
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb8:	e7f0      	b.n	8003f9c <_vfiprintf_r+0x1bc>
 8003fba:	ab03      	add	r3, sp, #12
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_vfiprintf_r+0x230>)
 8003fc4:	a904      	add	r1, sp, #16
 8003fc6:	f3af 8000 	nop.w
 8003fca:	4607      	mov	r7, r0
 8003fcc:	1c78      	adds	r0, r7, #1
 8003fce:	d1d6      	bne.n	8003f7e <_vfiprintf_r+0x19e>
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x202>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x202>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fde:	f7ff fe7f 	bl	8003ce0 <__retarget_lock_release_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	065b      	lsls	r3, r3, #25
 8003fe6:	f53f af1d 	bmi.w	8003e24 <_vfiprintf_r+0x44>
 8003fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fec:	e71c      	b.n	8003e28 <_vfiprintf_r+0x48>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <_vfiprintf_r+0x230>)
 8003ff8:	a904      	add	r1, sp, #16
 8003ffa:	f000 f87d 	bl	80040f8 <_printf_i>
 8003ffe:	e7e4      	b.n	8003fca <_vfiprintf_r+0x1ea>
 8004000:	0800472e 	.word	0x0800472e
 8004004:	08004734 	.word	0x08004734
 8004008:	08004738 	.word	0x08004738
 800400c:	00000000 	.word	0x00000000
 8004010:	08003dbb 	.word	0x08003dbb

08004014 <_printf_common>:
 8004014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	4616      	mov	r6, r2
 800401a:	4699      	mov	r9, r3
 800401c:	688a      	ldr	r2, [r1, #8]
 800401e:	690b      	ldr	r3, [r1, #16]
 8004020:	4607      	mov	r7, r0
 8004022:	4293      	cmp	r3, r2
 8004024:	bfb8      	it	lt
 8004026:	4613      	movlt	r3, r2
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800402e:	460c      	mov	r4, r1
 8004030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004034:	b10a      	cbz	r2, 800403a <_printf_common+0x26>
 8004036:	3301      	adds	r3, #1
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	0699      	lsls	r1, r3, #26
 800403e:	bf42      	ittt	mi
 8004040:	6833      	ldrmi	r3, [r6, #0]
 8004042:	3302      	addmi	r3, #2
 8004044:	6033      	strmi	r3, [r6, #0]
 8004046:	6825      	ldr	r5, [r4, #0]
 8004048:	f015 0506 	ands.w	r5, r5, #6
 800404c:	d106      	bne.n	800405c <_printf_common+0x48>
 800404e:	f104 0a19 	add.w	sl, r4, #25
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	6832      	ldr	r2, [r6, #0]
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	42ab      	cmp	r3, r5
 800405a:	dc2b      	bgt.n	80040b4 <_printf_common+0xa0>
 800405c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004060:	1e13      	subs	r3, r2, #0
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	bf18      	it	ne
 8004066:	2301      	movne	r3, #1
 8004068:	0692      	lsls	r2, r2, #26
 800406a:	d430      	bmi.n	80040ce <_printf_common+0xba>
 800406c:	4649      	mov	r1, r9
 800406e:	4638      	mov	r0, r7
 8004070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004074:	47c0      	blx	r8
 8004076:	3001      	adds	r0, #1
 8004078:	d023      	beq.n	80040c2 <_printf_common+0xae>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf14      	ite	ne
 8004086:	2500      	movne	r5, #0
 8004088:	6833      	ldreq	r3, [r6, #0]
 800408a:	f04f 0600 	mov.w	r6, #0
 800408e:	bf08      	it	eq
 8004090:	68e5      	ldreq	r5, [r4, #12]
 8004092:	f104 041a 	add.w	r4, r4, #26
 8004096:	bf08      	it	eq
 8004098:	1aed      	subeq	r5, r5, r3
 800409a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800409e:	bf08      	it	eq
 80040a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bfc4      	itt	gt
 80040a8:	1a9b      	subgt	r3, r3, r2
 80040aa:	18ed      	addgt	r5, r5, r3
 80040ac:	42b5      	cmp	r5, r6
 80040ae:	d11a      	bne.n	80040e6 <_printf_common+0xd2>
 80040b0:	2000      	movs	r0, #0
 80040b2:	e008      	b.n	80040c6 <_printf_common+0xb2>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4652      	mov	r2, sl
 80040b8:	4649      	mov	r1, r9
 80040ba:	4638      	mov	r0, r7
 80040bc:	47c0      	blx	r8
 80040be:	3001      	adds	r0, #1
 80040c0:	d103      	bne.n	80040ca <_printf_common+0xb6>
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7c1      	b.n	8004052 <_printf_common+0x3e>
 80040ce:	2030      	movs	r0, #48	; 0x30
 80040d0:	18e1      	adds	r1, r4, r3
 80040d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040dc:	4422      	add	r2, r4
 80040de:	3302      	adds	r3, #2
 80040e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e4:	e7c2      	b.n	800406c <_printf_common+0x58>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4622      	mov	r2, r4
 80040ea:	4649      	mov	r1, r9
 80040ec:	4638      	mov	r0, r7
 80040ee:	47c0      	blx	r8
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0e6      	beq.n	80040c2 <_printf_common+0xae>
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7d9      	b.n	80040ac <_printf_common+0x98>

080040f8 <_printf_i>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	7e0f      	ldrb	r7, [r1, #24]
 80040fe:	4691      	mov	r9, r2
 8004100:	2f78      	cmp	r7, #120	; 0x78
 8004102:	4680      	mov	r8, r0
 8004104:	460c      	mov	r4, r1
 8004106:	469a      	mov	sl, r3
 8004108:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800410a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800410e:	d807      	bhi.n	8004120 <_printf_i+0x28>
 8004110:	2f62      	cmp	r7, #98	; 0x62
 8004112:	d80a      	bhi.n	800412a <_printf_i+0x32>
 8004114:	2f00      	cmp	r7, #0
 8004116:	f000 80d5 	beq.w	80042c4 <_printf_i+0x1cc>
 800411a:	2f58      	cmp	r7, #88	; 0x58
 800411c:	f000 80c1 	beq.w	80042a2 <_printf_i+0x1aa>
 8004120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004128:	e03a      	b.n	80041a0 <_printf_i+0xa8>
 800412a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800412e:	2b15      	cmp	r3, #21
 8004130:	d8f6      	bhi.n	8004120 <_printf_i+0x28>
 8004132:	a101      	add	r1, pc, #4	; (adr r1, 8004138 <_printf_i+0x40>)
 8004134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004138:	08004191 	.word	0x08004191
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004121 	.word	0x08004121
 8004144:	08004121 	.word	0x08004121
 8004148:	08004121 	.word	0x08004121
 800414c:	08004121 	.word	0x08004121
 8004150:	080041a5 	.word	0x080041a5
 8004154:	08004121 	.word	0x08004121
 8004158:	08004121 	.word	0x08004121
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	080042ab 	.word	0x080042ab
 8004168:	080041d1 	.word	0x080041d1
 800416c:	08004265 	.word	0x08004265
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042cd 	.word	0x080042cd
 800417c:	08004121 	.word	0x08004121
 8004180:	080041d1 	.word	0x080041d1
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	0800426d 	.word	0x0800426d
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	602a      	str	r2, [r5, #0]
 8004198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0a0      	b.n	80042e6 <_printf_i+0x1ee>
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	0607      	lsls	r7, r0, #24
 80041aa:	f103 0104 	add.w	r1, r3, #4
 80041ae:	6029      	str	r1, [r5, #0]
 80041b0:	d501      	bpl.n	80041b6 <_printf_i+0xbe>
 80041b2:	681e      	ldr	r6, [r3, #0]
 80041b4:	e003      	b.n	80041be <_printf_i+0xc6>
 80041b6:	0646      	lsls	r6, r0, #25
 80041b8:	d5fb      	bpl.n	80041b2 <_printf_i+0xba>
 80041ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041be:	2e00      	cmp	r6, #0
 80041c0:	da03      	bge.n	80041ca <_printf_i+0xd2>
 80041c2:	232d      	movs	r3, #45	; 0x2d
 80041c4:	4276      	negs	r6, r6
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	230a      	movs	r3, #10
 80041cc:	4859      	ldr	r0, [pc, #356]	; (8004334 <_printf_i+0x23c>)
 80041ce:	e012      	b.n	80041f6 <_printf_i+0xfe>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	1d19      	adds	r1, r3, #4
 80041d6:	6029      	str	r1, [r5, #0]
 80041d8:	0605      	lsls	r5, r0, #24
 80041da:	d501      	bpl.n	80041e0 <_printf_i+0xe8>
 80041dc:	681e      	ldr	r6, [r3, #0]
 80041de:	e002      	b.n	80041e6 <_printf_i+0xee>
 80041e0:	0641      	lsls	r1, r0, #25
 80041e2:	d5fb      	bpl.n	80041dc <_printf_i+0xe4>
 80041e4:	881e      	ldrh	r6, [r3, #0]
 80041e6:	2f6f      	cmp	r7, #111	; 0x6f
 80041e8:	bf0c      	ite	eq
 80041ea:	2308      	moveq	r3, #8
 80041ec:	230a      	movne	r3, #10
 80041ee:	4851      	ldr	r0, [pc, #324]	; (8004334 <_printf_i+0x23c>)
 80041f0:	2100      	movs	r1, #0
 80041f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041f6:	6865      	ldr	r5, [r4, #4]
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	bfa8      	it	ge
 80041fc:	6821      	ldrge	r1, [r4, #0]
 80041fe:	60a5      	str	r5, [r4, #8]
 8004200:	bfa4      	itt	ge
 8004202:	f021 0104 	bicge.w	r1, r1, #4
 8004206:	6021      	strge	r1, [r4, #0]
 8004208:	b90e      	cbnz	r6, 800420e <_printf_i+0x116>
 800420a:	2d00      	cmp	r5, #0
 800420c:	d04b      	beq.n	80042a6 <_printf_i+0x1ae>
 800420e:	4615      	mov	r5, r2
 8004210:	fbb6 f1f3 	udiv	r1, r6, r3
 8004214:	fb03 6711 	mls	r7, r3, r1, r6
 8004218:	5dc7      	ldrb	r7, [r0, r7]
 800421a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800421e:	4637      	mov	r7, r6
 8004220:	42bb      	cmp	r3, r7
 8004222:	460e      	mov	r6, r1
 8004224:	d9f4      	bls.n	8004210 <_printf_i+0x118>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d10b      	bne.n	8004242 <_printf_i+0x14a>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	07de      	lsls	r6, r3, #31
 800422e:	d508      	bpl.n	8004242 <_printf_i+0x14a>
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	6861      	ldr	r1, [r4, #4]
 8004234:	4299      	cmp	r1, r3
 8004236:	bfde      	ittt	le
 8004238:	2330      	movle	r3, #48	; 0x30
 800423a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800423e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004242:	1b52      	subs	r2, r2, r5
 8004244:	6122      	str	r2, [r4, #16]
 8004246:	464b      	mov	r3, r9
 8004248:	4621      	mov	r1, r4
 800424a:	4640      	mov	r0, r8
 800424c:	f8cd a000 	str.w	sl, [sp]
 8004250:	aa03      	add	r2, sp, #12
 8004252:	f7ff fedf 	bl	8004014 <_printf_common>
 8004256:	3001      	adds	r0, #1
 8004258:	d14a      	bne.n	80042f0 <_printf_i+0x1f8>
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	b004      	add	sp, #16
 8004260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f043 0320 	orr.w	r3, r3, #32
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	2778      	movs	r7, #120	; 0x78
 800426e:	4832      	ldr	r0, [pc, #200]	; (8004338 <_printf_i+0x240>)
 8004270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	6829      	ldr	r1, [r5, #0]
 8004278:	061f      	lsls	r7, r3, #24
 800427a:	f851 6b04 	ldr.w	r6, [r1], #4
 800427e:	d402      	bmi.n	8004286 <_printf_i+0x18e>
 8004280:	065f      	lsls	r7, r3, #25
 8004282:	bf48      	it	mi
 8004284:	b2b6      	uxthmi	r6, r6
 8004286:	07df      	lsls	r7, r3, #31
 8004288:	bf48      	it	mi
 800428a:	f043 0320 	orrmi.w	r3, r3, #32
 800428e:	6029      	str	r1, [r5, #0]
 8004290:	bf48      	it	mi
 8004292:	6023      	strmi	r3, [r4, #0]
 8004294:	b91e      	cbnz	r6, 800429e <_printf_i+0x1a6>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	f023 0320 	bic.w	r3, r3, #32
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	2310      	movs	r3, #16
 80042a0:	e7a6      	b.n	80041f0 <_printf_i+0xf8>
 80042a2:	4824      	ldr	r0, [pc, #144]	; (8004334 <_printf_i+0x23c>)
 80042a4:	e7e4      	b.n	8004270 <_printf_i+0x178>
 80042a6:	4615      	mov	r5, r2
 80042a8:	e7bd      	b.n	8004226 <_printf_i+0x12e>
 80042aa:	682b      	ldr	r3, [r5, #0]
 80042ac:	6826      	ldr	r6, [r4, #0]
 80042ae:	1d18      	adds	r0, r3, #4
 80042b0:	6961      	ldr	r1, [r4, #20]
 80042b2:	6028      	str	r0, [r5, #0]
 80042b4:	0635      	lsls	r5, r6, #24
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	d501      	bpl.n	80042be <_printf_i+0x1c6>
 80042ba:	6019      	str	r1, [r3, #0]
 80042bc:	e002      	b.n	80042c4 <_printf_i+0x1cc>
 80042be:	0670      	lsls	r0, r6, #25
 80042c0:	d5fb      	bpl.n	80042ba <_printf_i+0x1c2>
 80042c2:	8019      	strh	r1, [r3, #0]
 80042c4:	2300      	movs	r3, #0
 80042c6:	4615      	mov	r5, r2
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	e7bc      	b.n	8004246 <_printf_i+0x14e>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	2100      	movs	r1, #0
 80042d0:	1d1a      	adds	r2, r3, #4
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	681d      	ldr	r5, [r3, #0]
 80042d6:	6862      	ldr	r2, [r4, #4]
 80042d8:	4628      	mov	r0, r5
 80042da:	f000 f96f 	bl	80045bc <memchr>
 80042de:	b108      	cbz	r0, 80042e4 <_printf_i+0x1ec>
 80042e0:	1b40      	subs	r0, r0, r5
 80042e2:	6060      	str	r0, [r4, #4]
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	6123      	str	r3, [r4, #16]
 80042e8:	2300      	movs	r3, #0
 80042ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ee:	e7aa      	b.n	8004246 <_printf_i+0x14e>
 80042f0:	462a      	mov	r2, r5
 80042f2:	4649      	mov	r1, r9
 80042f4:	4640      	mov	r0, r8
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d0ad      	beq.n	800425a <_printf_i+0x162>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	079b      	lsls	r3, r3, #30
 8004302:	d413      	bmi.n	800432c <_printf_i+0x234>
 8004304:	68e0      	ldr	r0, [r4, #12]
 8004306:	9b03      	ldr	r3, [sp, #12]
 8004308:	4298      	cmp	r0, r3
 800430a:	bfb8      	it	lt
 800430c:	4618      	movlt	r0, r3
 800430e:	e7a6      	b.n	800425e <_printf_i+0x166>
 8004310:	2301      	movs	r3, #1
 8004312:	4632      	mov	r2, r6
 8004314:	4649      	mov	r1, r9
 8004316:	4640      	mov	r0, r8
 8004318:	47d0      	blx	sl
 800431a:	3001      	adds	r0, #1
 800431c:	d09d      	beq.n	800425a <_printf_i+0x162>
 800431e:	3501      	adds	r5, #1
 8004320:	68e3      	ldr	r3, [r4, #12]
 8004322:	9903      	ldr	r1, [sp, #12]
 8004324:	1a5b      	subs	r3, r3, r1
 8004326:	42ab      	cmp	r3, r5
 8004328:	dcf2      	bgt.n	8004310 <_printf_i+0x218>
 800432a:	e7eb      	b.n	8004304 <_printf_i+0x20c>
 800432c:	2500      	movs	r5, #0
 800432e:	f104 0619 	add.w	r6, r4, #25
 8004332:	e7f5      	b.n	8004320 <_printf_i+0x228>
 8004334:	0800473f 	.word	0x0800473f
 8004338:	08004750 	.word	0x08004750

0800433c <__sflush_r>:
 800433c:	898a      	ldrh	r2, [r1, #12]
 800433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004340:	4605      	mov	r5, r0
 8004342:	0710      	lsls	r0, r2, #28
 8004344:	460c      	mov	r4, r1
 8004346:	d457      	bmi.n	80043f8 <__sflush_r+0xbc>
 8004348:	684b      	ldr	r3, [r1, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	dc04      	bgt.n	8004358 <__sflush_r+0x1c>
 800434e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	dc01      	bgt.n	8004358 <__sflush_r+0x1c>
 8004354:	2000      	movs	r0, #0
 8004356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435a:	2e00      	cmp	r6, #0
 800435c:	d0fa      	beq.n	8004354 <__sflush_r+0x18>
 800435e:	2300      	movs	r3, #0
 8004360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004364:	682f      	ldr	r7, [r5, #0]
 8004366:	6a21      	ldr	r1, [r4, #32]
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	d032      	beq.n	80043d2 <__sflush_r+0x96>
 800436c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	075a      	lsls	r2, r3, #29
 8004372:	d505      	bpl.n	8004380 <__sflush_r+0x44>
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	1ac0      	subs	r0, r0, r3
 8004378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437a:	b10b      	cbz	r3, 8004380 <__sflush_r+0x44>
 800437c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800437e:	1ac0      	subs	r0, r0, r3
 8004380:	2300      	movs	r3, #0
 8004382:	4602      	mov	r2, r0
 8004384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004386:	4628      	mov	r0, r5
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	47b0      	blx	r6
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	d106      	bne.n	80043a0 <__sflush_r+0x64>
 8004392:	6829      	ldr	r1, [r5, #0]
 8004394:	291d      	cmp	r1, #29
 8004396:	d82b      	bhi.n	80043f0 <__sflush_r+0xb4>
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <__sflush_r+0x100>)
 800439a:	410a      	asrs	r2, r1
 800439c:	07d6      	lsls	r6, r2, #31
 800439e:	d427      	bmi.n	80043f0 <__sflush_r+0xb4>
 80043a0:	2200      	movs	r2, #0
 80043a2:	6062      	str	r2, [r4, #4]
 80043a4:	6922      	ldr	r2, [r4, #16]
 80043a6:	04d9      	lsls	r1, r3, #19
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	d504      	bpl.n	80043b6 <__sflush_r+0x7a>
 80043ac:	1c42      	adds	r2, r0, #1
 80043ae:	d101      	bne.n	80043b4 <__sflush_r+0x78>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b903      	cbnz	r3, 80043b6 <__sflush_r+0x7a>
 80043b4:	6560      	str	r0, [r4, #84]	; 0x54
 80043b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b8:	602f      	str	r7, [r5, #0]
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d0ca      	beq.n	8004354 <__sflush_r+0x18>
 80043be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d002      	beq.n	80043cc <__sflush_r+0x90>
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7ff fc9a 	bl	8003d00 <_free_r>
 80043cc:	2000      	movs	r0, #0
 80043ce:	6360      	str	r0, [r4, #52]	; 0x34
 80043d0:	e7c1      	b.n	8004356 <__sflush_r+0x1a>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b0      	blx	r6
 80043d8:	1c41      	adds	r1, r0, #1
 80043da:	d1c8      	bne.n	800436e <__sflush_r+0x32>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0c5      	beq.n	800436e <__sflush_r+0x32>
 80043e2:	2b1d      	cmp	r3, #29
 80043e4:	d001      	beq.n	80043ea <__sflush_r+0xae>
 80043e6:	2b16      	cmp	r3, #22
 80043e8:	d101      	bne.n	80043ee <__sflush_r+0xb2>
 80043ea:	602f      	str	r7, [r5, #0]
 80043ec:	e7b2      	b.n	8004354 <__sflush_r+0x18>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	e7ae      	b.n	8004356 <__sflush_r+0x1a>
 80043f8:	690f      	ldr	r7, [r1, #16]
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	d0aa      	beq.n	8004354 <__sflush_r+0x18>
 80043fe:	0793      	lsls	r3, r2, #30
 8004400:	bf18      	it	ne
 8004402:	2300      	movne	r3, #0
 8004404:	680e      	ldr	r6, [r1, #0]
 8004406:	bf08      	it	eq
 8004408:	694b      	ldreq	r3, [r1, #20]
 800440a:	1bf6      	subs	r6, r6, r7
 800440c:	600f      	str	r7, [r1, #0]
 800440e:	608b      	str	r3, [r1, #8]
 8004410:	2e00      	cmp	r6, #0
 8004412:	dd9f      	ble.n	8004354 <__sflush_r+0x18>
 8004414:	4633      	mov	r3, r6
 8004416:	463a      	mov	r2, r7
 8004418:	4628      	mov	r0, r5
 800441a:	6a21      	ldr	r1, [r4, #32]
 800441c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004420:	47e0      	blx	ip
 8004422:	2800      	cmp	r0, #0
 8004424:	dc06      	bgt.n	8004434 <__sflush_r+0xf8>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	e790      	b.n	8004356 <__sflush_r+0x1a>
 8004434:	4407      	add	r7, r0
 8004436:	1a36      	subs	r6, r6, r0
 8004438:	e7ea      	b.n	8004410 <__sflush_r+0xd4>
 800443a:	bf00      	nop
 800443c:	dfbffffe 	.word	0xdfbffffe

08004440 <_fflush_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	4605      	mov	r5, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b913      	cbnz	r3, 8004450 <_fflush_r+0x10>
 800444a:	2500      	movs	r5, #0
 800444c:	4628      	mov	r0, r5
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	b118      	cbz	r0, 800445a <_fflush_r+0x1a>
 8004452:	6a03      	ldr	r3, [r0, #32]
 8004454:	b90b      	cbnz	r3, 800445a <_fflush_r+0x1a>
 8004456:	f7ff fb2d 	bl	8003ab4 <__sinit>
 800445a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f3      	beq.n	800444a <_fflush_r+0xa>
 8004462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004464:	07d0      	lsls	r0, r2, #31
 8004466:	d404      	bmi.n	8004472 <_fflush_r+0x32>
 8004468:	0599      	lsls	r1, r3, #22
 800446a:	d402      	bmi.n	8004472 <_fflush_r+0x32>
 800446c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800446e:	f7ff fc36 	bl	8003cde <__retarget_lock_acquire_recursive>
 8004472:	4628      	mov	r0, r5
 8004474:	4621      	mov	r1, r4
 8004476:	f7ff ff61 	bl	800433c <__sflush_r>
 800447a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800447c:	4605      	mov	r5, r0
 800447e:	07da      	lsls	r2, r3, #31
 8004480:	d4e4      	bmi.n	800444c <_fflush_r+0xc>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	059b      	lsls	r3, r3, #22
 8004486:	d4e1      	bmi.n	800444c <_fflush_r+0xc>
 8004488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448a:	f7ff fc29 	bl	8003ce0 <__retarget_lock_release_recursive>
 800448e:	e7dd      	b.n	800444c <_fflush_r+0xc>

08004490 <__swbuf_r>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	460e      	mov	r6, r1
 8004494:	4614      	mov	r4, r2
 8004496:	4605      	mov	r5, r0
 8004498:	b118      	cbz	r0, 80044a2 <__swbuf_r+0x12>
 800449a:	6a03      	ldr	r3, [r0, #32]
 800449c:	b90b      	cbnz	r3, 80044a2 <__swbuf_r+0x12>
 800449e:	f7ff fb09 	bl	8003ab4 <__sinit>
 80044a2:	69a3      	ldr	r3, [r4, #24]
 80044a4:	60a3      	str	r3, [r4, #8]
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	071a      	lsls	r2, r3, #28
 80044aa:	d525      	bpl.n	80044f8 <__swbuf_r+0x68>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	b31b      	cbz	r3, 80044f8 <__swbuf_r+0x68>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	6922      	ldr	r2, [r4, #16]
 80044b4:	b2f6      	uxtb	r6, r6
 80044b6:	1a98      	subs	r0, r3, r2
 80044b8:	6963      	ldr	r3, [r4, #20]
 80044ba:	4637      	mov	r7, r6
 80044bc:	4283      	cmp	r3, r0
 80044be:	dc04      	bgt.n	80044ca <__swbuf_r+0x3a>
 80044c0:	4621      	mov	r1, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7ff ffbc 	bl	8004440 <_fflush_r>
 80044c8:	b9e0      	cbnz	r0, 8004504 <__swbuf_r+0x74>
 80044ca:	68a3      	ldr	r3, [r4, #8]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	60a3      	str	r3, [r4, #8]
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	6022      	str	r2, [r4, #0]
 80044d6:	701e      	strb	r6, [r3, #0]
 80044d8:	6962      	ldr	r2, [r4, #20]
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	429a      	cmp	r2, r3
 80044de:	d004      	beq.n	80044ea <__swbuf_r+0x5a>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	07db      	lsls	r3, r3, #31
 80044e4:	d506      	bpl.n	80044f4 <__swbuf_r+0x64>
 80044e6:	2e0a      	cmp	r6, #10
 80044e8:	d104      	bne.n	80044f4 <__swbuf_r+0x64>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff ffa7 	bl	8004440 <_fflush_r>
 80044f2:	b938      	cbnz	r0, 8004504 <__swbuf_r+0x74>
 80044f4:	4638      	mov	r0, r7
 80044f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f806 	bl	800450c <__swsetup_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	d0d5      	beq.n	80044b0 <__swbuf_r+0x20>
 8004504:	f04f 37ff 	mov.w	r7, #4294967295
 8004508:	e7f4      	b.n	80044f4 <__swbuf_r+0x64>
	...

0800450c <__swsetup_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <__swsetup_r+0xac>)
 8004510:	4605      	mov	r5, r0
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	460c      	mov	r4, r1
 8004516:	b118      	cbz	r0, 8004520 <__swsetup_r+0x14>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	b90b      	cbnz	r3, 8004520 <__swsetup_r+0x14>
 800451c:	f7ff faca 	bl	8003ab4 <__sinit>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004526:	0718      	lsls	r0, r3, #28
 8004528:	d422      	bmi.n	8004570 <__swsetup_r+0x64>
 800452a:	06d9      	lsls	r1, r3, #27
 800452c:	d407      	bmi.n	800453e <__swsetup_r+0x32>
 800452e:	2309      	movs	r3, #9
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004536:	f04f 30ff 	mov.w	r0, #4294967295
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	e034      	b.n	80045a8 <__swsetup_r+0x9c>
 800453e:	0758      	lsls	r0, r3, #29
 8004540:	d512      	bpl.n	8004568 <__swsetup_r+0x5c>
 8004542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004544:	b141      	cbz	r1, 8004558 <__swsetup_r+0x4c>
 8004546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800454a:	4299      	cmp	r1, r3
 800454c:	d002      	beq.n	8004554 <__swsetup_r+0x48>
 800454e:	4628      	mov	r0, r5
 8004550:	f7ff fbd6 	bl	8003d00 <_free_r>
 8004554:	2300      	movs	r3, #0
 8004556:	6363      	str	r3, [r4, #52]	; 0x34
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	2300      	movs	r3, #0
 8004562:	6063      	str	r3, [r4, #4]
 8004564:	6923      	ldr	r3, [r4, #16]
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b94b      	cbnz	r3, 8004588 <__swsetup_r+0x7c>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800457a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457e:	d003      	beq.n	8004588 <__swsetup_r+0x7c>
 8004580:	4621      	mov	r1, r4
 8004582:	4628      	mov	r0, r5
 8004584:	f000 f84d 	bl	8004622 <__smakebuf_r>
 8004588:	89a0      	ldrh	r0, [r4, #12]
 800458a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800458e:	f010 0301 	ands.w	r3, r0, #1
 8004592:	d00a      	beq.n	80045aa <__swsetup_r+0x9e>
 8004594:	2300      	movs	r3, #0
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	6963      	ldr	r3, [r4, #20]
 800459a:	425b      	negs	r3, r3
 800459c:	61a3      	str	r3, [r4, #24]
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	b943      	cbnz	r3, 80045b4 <__swsetup_r+0xa8>
 80045a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045a6:	d1c4      	bne.n	8004532 <__swsetup_r+0x26>
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
 80045aa:	0781      	lsls	r1, r0, #30
 80045ac:	bf58      	it	pl
 80045ae:	6963      	ldrpl	r3, [r4, #20]
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	e7f4      	b.n	800459e <__swsetup_r+0x92>
 80045b4:	2000      	movs	r0, #0
 80045b6:	e7f7      	b.n	80045a8 <__swsetup_r+0x9c>
 80045b8:	20000064 	.word	0x20000064

080045bc <memchr>:
 80045bc:	4603      	mov	r3, r0
 80045be:	b510      	push	{r4, lr}
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	4402      	add	r2, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	d101      	bne.n	80045ce <memchr+0x12>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e003      	b.n	80045d6 <memchr+0x1a>
 80045ce:	7804      	ldrb	r4, [r0, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	428c      	cmp	r4, r1
 80045d4:	d1f6      	bne.n	80045c4 <memchr+0x8>
 80045d6:	bd10      	pop	{r4, pc}

080045d8 <__swhatbuf_r>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	460c      	mov	r4, r1
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	4615      	mov	r5, r2
 80045e2:	2900      	cmp	r1, #0
 80045e4:	461e      	mov	r6, r3
 80045e6:	b096      	sub	sp, #88	; 0x58
 80045e8:	da0c      	bge.n	8004604 <__swhatbuf_r+0x2c>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	2100      	movs	r1, #0
 80045ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045f2:	bf0c      	ite	eq
 80045f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045f8:	2340      	movne	r3, #64	; 0x40
 80045fa:	2000      	movs	r0, #0
 80045fc:	6031      	str	r1, [r6, #0]
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	b016      	add	sp, #88	; 0x58
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	466a      	mov	r2, sp
 8004606:	f000 f849 	bl	800469c <_fstat_r>
 800460a:	2800      	cmp	r0, #0
 800460c:	dbed      	blt.n	80045ea <__swhatbuf_r+0x12>
 800460e:	9901      	ldr	r1, [sp, #4]
 8004610:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004614:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004618:	4259      	negs	r1, r3
 800461a:	4159      	adcs	r1, r3
 800461c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004620:	e7eb      	b.n	80045fa <__swhatbuf_r+0x22>

08004622 <__smakebuf_r>:
 8004622:	898b      	ldrh	r3, [r1, #12]
 8004624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004626:	079d      	lsls	r5, r3, #30
 8004628:	4606      	mov	r6, r0
 800462a:	460c      	mov	r4, r1
 800462c:	d507      	bpl.n	800463e <__smakebuf_r+0x1c>
 800462e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	2301      	movs	r3, #1
 8004638:	6163      	str	r3, [r4, #20]
 800463a:	b002      	add	sp, #8
 800463c:	bd70      	pop	{r4, r5, r6, pc}
 800463e:	466a      	mov	r2, sp
 8004640:	ab01      	add	r3, sp, #4
 8004642:	f7ff ffc9 	bl	80045d8 <__swhatbuf_r>
 8004646:	9900      	ldr	r1, [sp, #0]
 8004648:	4605      	mov	r5, r0
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff f91a 	bl	8003884 <_malloc_r>
 8004650:	b948      	cbnz	r0, 8004666 <__smakebuf_r+0x44>
 8004652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004656:	059a      	lsls	r2, r3, #22
 8004658:	d4ef      	bmi.n	800463a <__smakebuf_r+0x18>
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	f043 0302 	orr.w	r3, r3, #2
 8004662:	81a3      	strh	r3, [r4, #12]
 8004664:	e7e3      	b.n	800462e <__smakebuf_r+0xc>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	6020      	str	r0, [r4, #0]
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	9b00      	ldr	r3, [sp, #0]
 8004672:	6120      	str	r0, [r4, #16]
 8004674:	6163      	str	r3, [r4, #20]
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	b15b      	cbz	r3, 8004692 <__smakebuf_r+0x70>
 800467a:	4630      	mov	r0, r6
 800467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004680:	f000 f81e 	bl	80046c0 <_isatty_r>
 8004684:	b128      	cbz	r0, 8004692 <__smakebuf_r+0x70>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	431d      	orrs	r5, r3
 8004696:	81a5      	strh	r5, [r4, #12]
 8004698:	e7cf      	b.n	800463a <__smakebuf_r+0x18>
	...

0800469c <_fstat_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	2300      	movs	r3, #0
 80046a0:	4d06      	ldr	r5, [pc, #24]	; (80046bc <_fstat_r+0x20>)
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	f7fc fbd9 	bl	8000e60 <_fstat>
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	d102      	bne.n	80046b8 <_fstat_r+0x1c>
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	b103      	cbz	r3, 80046b8 <_fstat_r+0x1c>
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	bd38      	pop	{r3, r4, r5, pc}
 80046ba:	bf00      	nop
 80046bc:	20000374 	.word	0x20000374

080046c0 <_isatty_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	2300      	movs	r3, #0
 80046c4:	4d05      	ldr	r5, [pc, #20]	; (80046dc <_isatty_r+0x1c>)
 80046c6:	4604      	mov	r4, r0
 80046c8:	4608      	mov	r0, r1
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc fbd7 	bl	8000e7e <_isatty>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_isatty_r+0x1a>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_isatty_r+0x1a>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	20000374 	.word	0x20000374

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
